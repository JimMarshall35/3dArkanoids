// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_proto_files/PlayBoardEdit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
namespace EditorGRPC {
class BlockEdit;
struct BlockEditDefaultTypeInternal;
extern BlockEditDefaultTypeInternal _BlockEdit_default_instance_;
class BlockType;
struct BlockTypeDefaultTypeInternal;
extern BlockTypeDefaultTypeInternal _BlockType_default_instance_;
class BoardDescription;
struct BoardDescriptionDefaultTypeInternal;
extern BoardDescriptionDefaultTypeInternal _BoardDescription_default_instance_;
class ChildNodes;
struct ChildNodesDefaultTypeInternal;
extern ChildNodesDefaultTypeInternal _ChildNodes_default_instance_;
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class DrawableLayersStack;
struct DrawableLayersStackDefaultTypeInternal;
extern DrawableLayersStackDefaultTypeInternal _DrawableLayersStack_default_instance_;
class EditBlockResult;
struct EditBlockResultDefaultTypeInternal;
extern EditBlockResultDefaultTypeInternal _EditBlockResult_default_instance_;
class FileSavePath;
struct FileSavePathDefaultTypeInternal;
extern FileSavePathDefaultTypeInternal _FileSavePath_default_instance_;
class FileSaveResult;
struct FileSaveResultDefaultTypeInternal;
extern FileSaveResultDefaultTypeInternal _FileSaveResult_default_instance_;
class FrameworkLayer;
struct FrameworkLayerDefaultTypeInternal;
extern FrameworkLayerDefaultTypeInternal _FrameworkLayer_default_instance_;
class GameFrameworkLayers;
struct GameFrameworkLayersDefaultTypeInternal;
extern GameFrameworkLayersDefaultTypeInternal _GameFrameworkLayers_default_instance_;
class GameSettings;
struct GameSettingsDefaultTypeInternal;
extern GameSettingsDefaultTypeInternal _GameSettings_default_instance_;
class InputLayersStack;
struct InputLayersStackDefaultTypeInternal;
extern InputLayersStackDefaultTypeInternal _InputLayersStack_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class SerializablePropertiesNode;
struct SerializablePropertiesNodeDefaultTypeInternal;
extern SerializablePropertiesNodeDefaultTypeInternal _SerializablePropertiesNode_default_instance_;
class SerializablePropertiesNodes;
struct SerializablePropertiesNodesDefaultTypeInternal;
extern SerializablePropertiesNodesDefaultTypeInternal _SerializablePropertiesNodes_default_instance_;
class SerializableProperty;
struct SerializablePropertyDefaultTypeInternal;
extern SerializablePropertyDefaultTypeInternal _SerializableProperty_default_instance_;
class SerializablePropertyData;
struct SerializablePropertyDataDefaultTypeInternal;
extern SerializablePropertyDataDefaultTypeInternal _SerializablePropertyData_default_instance_;
class SetBoardDescriptionResult;
struct SetBoardDescriptionResultDefaultTypeInternal;
extern SetBoardDescriptionResultDefaultTypeInternal _SetBoardDescriptionResult_default_instance_;
class SetSerializablePropertyData;
struct SetSerializablePropertyDataDefaultTypeInternal;
extern SetSerializablePropertyDataDefaultTypeInternal _SetSerializablePropertyData_default_instance_;
class SetSerializablePropertyResult;
struct SetSerializablePropertyResultDefaultTypeInternal;
extern SetSerializablePropertyResultDefaultTypeInternal _SetSerializablePropertyResult_default_instance_;
class UpdatableLayersStack;
struct UpdatableLayersStackDefaultTypeInternal;
extern UpdatableLayersStackDefaultTypeInternal _UpdatableLayersStack_default_instance_;
class Vec2;
struct Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
struct Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
class Vec4;
struct Vec4DefaultTypeInternal;
extern Vec4DefaultTypeInternal _Vec4_default_instance_;
class Void;
struct VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
}  // namespace EditorGRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::EditorGRPC::BlockEdit* Arena::CreateMaybeMessage<::EditorGRPC::BlockEdit>(Arena*);
template<> ::EditorGRPC::BlockType* Arena::CreateMaybeMessage<::EditorGRPC::BlockType>(Arena*);
template<> ::EditorGRPC::BoardDescription* Arena::CreateMaybeMessage<::EditorGRPC::BoardDescription>(Arena*);
template<> ::EditorGRPC::ChildNodes* Arena::CreateMaybeMessage<::EditorGRPC::ChildNodes>(Arena*);
template<> ::EditorGRPC::ClientInfo* Arena::CreateMaybeMessage<::EditorGRPC::ClientInfo>(Arena*);
template<> ::EditorGRPC::DrawableLayersStack* Arena::CreateMaybeMessage<::EditorGRPC::DrawableLayersStack>(Arena*);
template<> ::EditorGRPC::EditBlockResult* Arena::CreateMaybeMessage<::EditorGRPC::EditBlockResult>(Arena*);
template<> ::EditorGRPC::FileSavePath* Arena::CreateMaybeMessage<::EditorGRPC::FileSavePath>(Arena*);
template<> ::EditorGRPC::FileSaveResult* Arena::CreateMaybeMessage<::EditorGRPC::FileSaveResult>(Arena*);
template<> ::EditorGRPC::FrameworkLayer* Arena::CreateMaybeMessage<::EditorGRPC::FrameworkLayer>(Arena*);
template<> ::EditorGRPC::GameFrameworkLayers* Arena::CreateMaybeMessage<::EditorGRPC::GameFrameworkLayers>(Arena*);
template<> ::EditorGRPC::GameSettings* Arena::CreateMaybeMessage<::EditorGRPC::GameSettings>(Arena*);
template<> ::EditorGRPC::InputLayersStack* Arena::CreateMaybeMessage<::EditorGRPC::InputLayersStack>(Arena*);
template<> ::EditorGRPC::Point* Arena::CreateMaybeMessage<::EditorGRPC::Point>(Arena*);
template<> ::EditorGRPC::SerializablePropertiesNode* Arena::CreateMaybeMessage<::EditorGRPC::SerializablePropertiesNode>(Arena*);
template<> ::EditorGRPC::SerializablePropertiesNodes* Arena::CreateMaybeMessage<::EditorGRPC::SerializablePropertiesNodes>(Arena*);
template<> ::EditorGRPC::SerializableProperty* Arena::CreateMaybeMessage<::EditorGRPC::SerializableProperty>(Arena*);
template<> ::EditorGRPC::SerializablePropertyData* Arena::CreateMaybeMessage<::EditorGRPC::SerializablePropertyData>(Arena*);
template<> ::EditorGRPC::SetBoardDescriptionResult* Arena::CreateMaybeMessage<::EditorGRPC::SetBoardDescriptionResult>(Arena*);
template<> ::EditorGRPC::SetSerializablePropertyData* Arena::CreateMaybeMessage<::EditorGRPC::SetSerializablePropertyData>(Arena*);
template<> ::EditorGRPC::SetSerializablePropertyResult* Arena::CreateMaybeMessage<::EditorGRPC::SetSerializablePropertyResult>(Arena*);
template<> ::EditorGRPC::UpdatableLayersStack* Arena::CreateMaybeMessage<::EditorGRPC::UpdatableLayersStack>(Arena*);
template<> ::EditorGRPC::Vec2* Arena::CreateMaybeMessage<::EditorGRPC::Vec2>(Arena*);
template<> ::EditorGRPC::Vec3* Arena::CreateMaybeMessage<::EditorGRPC::Vec3>(Arena*);
template<> ::EditorGRPC::Vec4* Arena::CreateMaybeMessage<::EditorGRPC::Vec4>(Arena*);
template<> ::EditorGRPC::Void* Arena::CreateMaybeMessage<::EditorGRPC::Void>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace EditorGRPC {

enum EditBlockResult_Result : int {
  EditBlockResult_Result_SPACE_EMPTY = 0,
  EditBlockResult_Result_BLOCK_AT_SPACE = 1,
  EditBlockResult_Result_FAILURE_POINT_OUT_OF_BOUNDS = 2,
  EditBlockResult_Result_OTHER_FAILURE = 3,
  EditBlockResult_Result_EditBlockResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EditBlockResult_Result_EditBlockResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EditBlockResult_Result_IsValid(int value);
constexpr EditBlockResult_Result EditBlockResult_Result_Result_MIN = EditBlockResult_Result_SPACE_EMPTY;
constexpr EditBlockResult_Result EditBlockResult_Result_Result_MAX = EditBlockResult_Result_OTHER_FAILURE;
constexpr int EditBlockResult_Result_Result_ARRAYSIZE = EditBlockResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditBlockResult_Result_descriptor();
template<typename T>
inline const std::string& EditBlockResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EditBlockResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EditBlockResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EditBlockResult_Result_descriptor(), enum_t_value);
}
inline bool EditBlockResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EditBlockResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EditBlockResult_Result>(
    EditBlockResult_Result_descriptor(), name, value);
}
enum SetBoardDescriptionResult_Result : int {
  SetBoardDescriptionResult_Result_SUCCESS = 0,
  SetBoardDescriptionResult_Result_FAILURE_TOO_MANY_BYTES_FOR_WHD = 1,
  SetBoardDescriptionResult_Result_FAILURE_TOO_FEW_BYTES_FOR_WHD = 2,
  SetBoardDescriptionResult_Result_SetBoardDescriptionResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetBoardDescriptionResult_Result_SetBoardDescriptionResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetBoardDescriptionResult_Result_IsValid(int value);
constexpr SetBoardDescriptionResult_Result SetBoardDescriptionResult_Result_Result_MIN = SetBoardDescriptionResult_Result_SUCCESS;
constexpr SetBoardDescriptionResult_Result SetBoardDescriptionResult_Result_Result_MAX = SetBoardDescriptionResult_Result_FAILURE_TOO_FEW_BYTES_FOR_WHD;
constexpr int SetBoardDescriptionResult_Result_Result_ARRAYSIZE = SetBoardDescriptionResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetBoardDescriptionResult_Result_descriptor();
template<typename T>
inline const std::string& SetBoardDescriptionResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetBoardDescriptionResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetBoardDescriptionResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetBoardDescriptionResult_Result_descriptor(), enum_t_value);
}
inline bool SetBoardDescriptionResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetBoardDescriptionResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetBoardDescriptionResult_Result>(
    SetBoardDescriptionResult_Result_descriptor(), name, value);
}
enum SerializableProperty_Type : int {
  SerializableProperty_Type_Uint32 = 0,
  SerializableProperty_Type_Uint16 = 1,
  SerializableProperty_Type_Uint8 = 2,
  SerializableProperty_Type_Int32 = 3,
  SerializableProperty_Type_Int16 = 4,
  SerializableProperty_Type_Int8 = 5,
  SerializableProperty_Type_Float = 6,
  SerializableProperty_Type_Double = 7,
  SerializableProperty_Type_Bytes = 8,
  SerializableProperty_Type_Vec2 = 9,
  SerializableProperty_Type_Vec3 = 10,
  SerializableProperty_Type_Vec4 = 11,
  SerializableProperty_Type_SerializableNode = 12,
  SerializableProperty_Type_SerializableNodesArray = 13,
  SerializableProperty_Type_SerializableProperty_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SerializableProperty_Type_SerializableProperty_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SerializableProperty_Type_IsValid(int value);
constexpr SerializableProperty_Type SerializableProperty_Type_Type_MIN = SerializableProperty_Type_Uint32;
constexpr SerializableProperty_Type SerializableProperty_Type_Type_MAX = SerializableProperty_Type_SerializableNodesArray;
constexpr int SerializableProperty_Type_Type_ARRAYSIZE = SerializableProperty_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerializableProperty_Type_descriptor();
template<typename T>
inline const std::string& SerializableProperty_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SerializableProperty_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SerializableProperty_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SerializableProperty_Type_descriptor(), enum_t_value);
}
inline bool SerializableProperty_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SerializableProperty_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SerializableProperty_Type>(
    SerializableProperty_Type_descriptor(), name, value);
}
enum SetSerializablePropertyResult_Result : int {
  SetSerializablePropertyResult_Result_SUCCESS = 0,
  SetSerializablePropertyResult_Result_FAILURE = 1,
  SetSerializablePropertyResult_Result_SetSerializablePropertyResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetSerializablePropertyResult_Result_SetSerializablePropertyResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetSerializablePropertyResult_Result_IsValid(int value);
constexpr SetSerializablePropertyResult_Result SetSerializablePropertyResult_Result_Result_MIN = SetSerializablePropertyResult_Result_SUCCESS;
constexpr SetSerializablePropertyResult_Result SetSerializablePropertyResult_Result_Result_MAX = SetSerializablePropertyResult_Result_FAILURE;
constexpr int SetSerializablePropertyResult_Result_Result_ARRAYSIZE = SetSerializablePropertyResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetSerializablePropertyResult_Result_descriptor();
template<typename T>
inline const std::string& SetSerializablePropertyResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetSerializablePropertyResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetSerializablePropertyResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetSerializablePropertyResult_Result_descriptor(), enum_t_value);
}
inline bool SetSerializablePropertyResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetSerializablePropertyResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetSerializablePropertyResult_Result>(
    SetSerializablePropertyResult_Result_descriptor(), name, value);
}
enum FileSaveResult_Result : int {
  FileSaveResult_Result_SUCCESS = 0,
  FileSaveResult_Result_FAILURE_PATH_NOT_VALID = 1,
  FileSaveResult_Result_OTHER_FAILURE = 2,
  FileSaveResult_Result_FileSaveResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FileSaveResult_Result_FileSaveResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FileSaveResult_Result_IsValid(int value);
constexpr FileSaveResult_Result FileSaveResult_Result_Result_MIN = FileSaveResult_Result_SUCCESS;
constexpr FileSaveResult_Result FileSaveResult_Result_Result_MAX = FileSaveResult_Result_OTHER_FAILURE;
constexpr int FileSaveResult_Result_Result_ARRAYSIZE = FileSaveResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileSaveResult_Result_descriptor();
template<typename T>
inline const std::string& FileSaveResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileSaveResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileSaveResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileSaveResult_Result_descriptor(), enum_t_value);
}
inline bool FileSaveResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileSaveResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileSaveResult_Result>(
    FileSaveResult_Result_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  int32_t z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class BlockEdit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.BlockEdit) */ {
 public:
  inline BlockEdit() : BlockEdit(nullptr) {}
  ~BlockEdit() override;
  explicit constexpr BlockEdit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockEdit(const BlockEdit& from);
  BlockEdit(BlockEdit&& from) noexcept
    : BlockEdit() {
    *this = ::std::move(from);
  }

  inline BlockEdit& operator=(const BlockEdit& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockEdit& operator=(BlockEdit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockEdit& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockEdit* internal_default_instance() {
    return reinterpret_cast<const BlockEdit*>(
               &_BlockEdit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockEdit& a, BlockEdit& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockEdit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockEdit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockEdit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockEdit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockEdit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockEdit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockEdit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.BlockEdit";
  }
  protected:
  explicit BlockEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kNewvalFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // int32 newval = 4;
  void clear_newval();
  int32_t newval() const;
  void set_newval(int32_t value);
  private:
  int32_t _internal_newval() const;
  void _internal_set_newval(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.BlockEdit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  int32_t z_;
  int32_t newval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class EditBlockResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.EditBlockResult) */ {
 public:
  inline EditBlockResult() : EditBlockResult(nullptr) {}
  ~EditBlockResult() override;
  explicit constexpr EditBlockResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditBlockResult(const EditBlockResult& from);
  EditBlockResult(EditBlockResult&& from) noexcept
    : EditBlockResult() {
    *this = ::std::move(from);
  }

  inline EditBlockResult& operator=(const EditBlockResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditBlockResult& operator=(EditBlockResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditBlockResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditBlockResult* internal_default_instance() {
    return reinterpret_cast<const EditBlockResult*>(
               &_EditBlockResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EditBlockResult& a, EditBlockResult& b) {
    a.Swap(&b);
  }
  inline void Swap(EditBlockResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditBlockResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditBlockResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditBlockResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditBlockResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EditBlockResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditBlockResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.EditBlockResult";
  }
  protected:
  explicit EditBlockResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EditBlockResult_Result Result;
  static constexpr Result SPACE_EMPTY =
    EditBlockResult_Result_SPACE_EMPTY;
  static constexpr Result BLOCK_AT_SPACE =
    EditBlockResult_Result_BLOCK_AT_SPACE;
  static constexpr Result FAILURE_POINT_OUT_OF_BOUNDS =
    EditBlockResult_Result_FAILURE_POINT_OUT_OF_BOUNDS;
  static constexpr Result OTHER_FAILURE =
    EditBlockResult_Result_OTHER_FAILURE;
  static inline bool Result_IsValid(int value) {
    return EditBlockResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    EditBlockResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    EditBlockResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    EditBlockResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return EditBlockResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return EditBlockResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return EditBlockResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kResultFieldNumber = 1,
    kBlockCodeFieldNumber = 2,
    kFinalZValueFieldNumber = 4,
    kFallTimeSecondsFieldNumber = 5,
  };
  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // .EditorGRPC.EditBlockResult.Result result = 1;
  void clear_result();
  ::EditorGRPC::EditBlockResult_Result result() const;
  void set_result(::EditorGRPC::EditBlockResult_Result value);
  private:
  ::EditorGRPC::EditBlockResult_Result _internal_result() const;
  void _internal_set_result(::EditorGRPC::EditBlockResult_Result value);
  public:

  // int32 blockCode = 2;
  void clear_blockcode();
  int32_t blockcode() const;
  void set_blockcode(int32_t value);
  private:
  int32_t _internal_blockcode() const;
  void _internal_set_blockcode(int32_t value);
  public:

  // int32 finalZValue = 4;
  void clear_finalzvalue();
  int32_t finalzvalue() const;
  void set_finalzvalue(int32_t value);
  private:
  int32_t _internal_finalzvalue() const;
  void _internal_set_finalzvalue(int32_t value);
  public:

  // float fallTimeSeconds = 5;
  void clear_falltimeseconds();
  float falltimeseconds() const;
  void set_falltimeseconds(float value);
  private:
  float _internal_falltimeseconds() const;
  void _internal_set_falltimeseconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.EditBlockResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  int result_;
  int32_t blockcode_;
  int32_t finalzvalue_;
  float falltimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SetBoardDescriptionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SetBoardDescriptionResult) */ {
 public:
  inline SetBoardDescriptionResult() : SetBoardDescriptionResult(nullptr) {}
  ~SetBoardDescriptionResult() override;
  explicit constexpr SetBoardDescriptionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBoardDescriptionResult(const SetBoardDescriptionResult& from);
  SetBoardDescriptionResult(SetBoardDescriptionResult&& from) noexcept
    : SetBoardDescriptionResult() {
    *this = ::std::move(from);
  }

  inline SetBoardDescriptionResult& operator=(const SetBoardDescriptionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBoardDescriptionResult& operator=(SetBoardDescriptionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBoardDescriptionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBoardDescriptionResult* internal_default_instance() {
    return reinterpret_cast<const SetBoardDescriptionResult*>(
               &_SetBoardDescriptionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetBoardDescriptionResult& a, SetBoardDescriptionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBoardDescriptionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBoardDescriptionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBoardDescriptionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBoardDescriptionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBoardDescriptionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBoardDescriptionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBoardDescriptionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SetBoardDescriptionResult";
  }
  protected:
  explicit SetBoardDescriptionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetBoardDescriptionResult_Result Result;
  static constexpr Result SUCCESS =
    SetBoardDescriptionResult_Result_SUCCESS;
  static constexpr Result FAILURE_TOO_MANY_BYTES_FOR_WHD =
    SetBoardDescriptionResult_Result_FAILURE_TOO_MANY_BYTES_FOR_WHD;
  static constexpr Result FAILURE_TOO_FEW_BYTES_FOR_WHD =
    SetBoardDescriptionResult_Result_FAILURE_TOO_FEW_BYTES_FOR_WHD;
  static inline bool Result_IsValid(int value) {
    return SetBoardDescriptionResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    SetBoardDescriptionResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    SetBoardDescriptionResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    SetBoardDescriptionResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return SetBoardDescriptionResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return SetBoardDescriptionResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return SetBoardDescriptionResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .EditorGRPC.SetBoardDescriptionResult.Result result = 1;
  void clear_result();
  ::EditorGRPC::SetBoardDescriptionResult_Result result() const;
  void set_result(::EditorGRPC::SetBoardDescriptionResult_Result value);
  private:
  ::EditorGRPC::SetBoardDescriptionResult_Result _internal_result() const;
  void _internal_set_result(::EditorGRPC::SetBoardDescriptionResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.SetBoardDescriptionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class Void final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:EditorGRPC.Void) */ {
 public:
  inline Void() : Void(nullptr) {}
  explicit constexpr Void(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Void(const Void& from);
  Void(Void&& from) noexcept
    : Void() {
    *this = ::std::move(from);
  }

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  inline Void& operator=(Void&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Void& default_instance() {
    return *internal_default_instance();
  }
  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Void& a, Void& b) {
    a.Swap(&b);
  }
  inline void Swap(Void* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Void* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Void* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Void>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Void& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Void& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.Void";
  }
  protected:
  explicit Void(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EditorGRPC.Void)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class BoardDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.BoardDescription) */ {
 public:
  inline BoardDescription() : BoardDescription(nullptr) {}
  ~BoardDescription() override;
  explicit constexpr BoardDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardDescription(const BoardDescription& from);
  BoardDescription(BoardDescription&& from) noexcept
    : BoardDescription() {
    *this = ::std::move(from);
  }

  inline BoardDescription& operator=(const BoardDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardDescription& operator=(BoardDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardDescription* internal_default_instance() {
    return reinterpret_cast<const BoardDescription*>(
               &_BoardDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoardDescription& a, BoardDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.BoardDescription";
  }
  protected:
  explicit BoardDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 depth = 3;
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.BoardDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t width_;
  int32_t height_;
  int32_t depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class ClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:EditorGRPC.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  explicit constexpr ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientInfo(const ClientInfo& from);
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.ClientInfo";
  }
  protected:
  explicit ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EditorGRPC.ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class BlockType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.BlockType) */ {
 public:
  inline BlockType() : BlockType(nullptr) {}
  ~BlockType() override;
  explicit constexpr BlockType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockType(const BlockType& from);
  BlockType(BlockType&& from) noexcept
    : BlockType() {
    *this = ::std::move(from);
  }

  inline BlockType& operator=(const BlockType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockType& operator=(BlockType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockType& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockType* internal_default_instance() {
    return reinterpret_cast<const BlockType*>(
               &_BlockType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockType& a, BlockType& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.BlockType";
  }
  protected:
  explicit BlockType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameEngineCodeFieldNumber = 1,
    kRedFieldNumber = 2,
    kGreenFieldNumber = 3,
    kBlueFieldNumber = 4,
    kAlphaFieldNumber = 5,
  };
  // int32 gameEngineCode = 1;
  void clear_gameenginecode();
  int32_t gameenginecode() const;
  void set_gameenginecode(int32_t value);
  private:
  int32_t _internal_gameenginecode() const;
  void _internal_set_gameenginecode(int32_t value);
  public:

  // float red = 2;
  void clear_red();
  float red() const;
  void set_red(float value);
  private:
  float _internal_red() const;
  void _internal_set_red(float value);
  public:

  // float green = 3;
  void clear_green();
  float green() const;
  void set_green(float value);
  private:
  float _internal_green() const;
  void _internal_set_green(float value);
  public:

  // float blue = 4;
  void clear_blue();
  float blue() const;
  void set_blue(float value);
  private:
  float _internal_blue() const;
  void _internal_set_blue(float value);
  public:

  // float alpha = 5;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.BlockType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t gameenginecode_;
  float red_;
  float green_;
  float blue_;
  float alpha_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class GameSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.GameSettings) */ {
 public:
  inline GameSettings() : GameSettings(nullptr) {}
  ~GameSettings() override;
  explicit constexpr GameSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameSettings(const GameSettings& from);
  GameSettings(GameSettings&& from) noexcept
    : GameSettings() {
    *this = ::std::move(from);
  }

  inline GameSettings& operator=(const GameSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSettings& operator=(GameSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameSettings* internal_default_instance() {
    return reinterpret_cast<const GameSettings*>(
               &_GameSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameSettings& a, GameSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.GameSettings";
  }
  protected:
  explicit GameSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPossibleBlocksFieldNumber = 1,
  };
  // repeated .EditorGRPC.BlockType possibleBlocks = 1;
  int possibleblocks_size() const;
  private:
  int _internal_possibleblocks_size() const;
  public:
  void clear_possibleblocks();
  ::EditorGRPC::BlockType* mutable_possibleblocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::BlockType >*
      mutable_possibleblocks();
  private:
  const ::EditorGRPC::BlockType& _internal_possibleblocks(int index) const;
  ::EditorGRPC::BlockType* _internal_add_possibleblocks();
  public:
  const ::EditorGRPC::BlockType& possibleblocks(int index) const;
  ::EditorGRPC::BlockType* add_possibleblocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::BlockType >&
      possibleblocks() const;

  // @@protoc_insertion_point(class_scope:EditorGRPC.GameSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::BlockType > possibleblocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class Vec2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.Vec2) */ {
 public:
  inline Vec2() : Vec2(nullptr) {}
  ~Vec2() override;
  explicit constexpr Vec2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec2(const Vec2& from);
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2& operator=(Vec2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.Vec2";
  }
  protected:
  explicit Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.Vec2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class Vec3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.Vec3) */ {
 public:
  inline Vec3() : Vec3(nullptr) {}
  ~Vec3() override;
  explicit constexpr Vec3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec3(const Vec3& from);
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3& operator=(Vec3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.Vec3";
  }
  protected:
  explicit Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.Vec3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class Vec4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.Vec4) */ {
 public:
  inline Vec4() : Vec4(nullptr) {}
  ~Vec4() override;
  explicit constexpr Vec4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec4(const Vec4& from);
  Vec4(Vec4&& from) noexcept
    : Vec4() {
    *this = ::std::move(from);
  }

  inline Vec4& operator=(const Vec4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec4& operator=(Vec4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec4* internal_default_instance() {
    return reinterpret_cast<const Vec4*>(
               &_Vec4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Vec4& a, Vec4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.Vec4";
  }
  protected:
  explicit Vec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.Vec4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class ChildNodes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.ChildNodes) */ {
 public:
  inline ChildNodes() : ChildNodes(nullptr) {}
  ~ChildNodes() override;
  explicit constexpr ChildNodes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChildNodes(const ChildNodes& from);
  ChildNodes(ChildNodes&& from) noexcept
    : ChildNodes() {
    *this = ::std::move(from);
  }

  inline ChildNodes& operator=(const ChildNodes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChildNodes& operator=(ChildNodes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChildNodes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChildNodes* internal_default_instance() {
    return reinterpret_cast<const ChildNodes*>(
               &_ChildNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChildNodes& a, ChildNodes& b) {
    a.Swap(&b);
  }
  inline void Swap(ChildNodes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChildNodes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChildNodes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChildNodes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChildNodes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChildNodes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChildNodes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.ChildNodes";
  }
  protected:
  explicit ChildNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .EditorGRPC.SerializablePropertiesNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::EditorGRPC::SerializablePropertiesNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >*
      mutable_nodes();
  private:
  const ::EditorGRPC::SerializablePropertiesNode& _internal_nodes(int index) const;
  ::EditorGRPC::SerializablePropertiesNode* _internal_add_nodes();
  public:
  const ::EditorGRPC::SerializablePropertiesNode& nodes(int index) const;
  ::EditorGRPC::SerializablePropertiesNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:EditorGRPC.ChildNodes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SerializablePropertyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SerializablePropertyData) */ {
 public:
  inline SerializablePropertyData() : SerializablePropertyData(nullptr) {}
  ~SerializablePropertyData() override;
  explicit constexpr SerializablePropertyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializablePropertyData(const SerializablePropertyData& from);
  SerializablePropertyData(SerializablePropertyData&& from) noexcept
    : SerializablePropertyData() {
    *this = ::std::move(from);
  }

  inline SerializablePropertyData& operator=(const SerializablePropertyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializablePropertyData& operator=(SerializablePropertyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializablePropertyData& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kU32 = 1,
    kU16 = 2,
    kU8 = 3,
    kI32 = 4,
    kI16 = 5,
    kI8 = 6,
    kF = 7,
    kD = 8,
    kB = 9,
    kI64 = 10,
    kV2 = 11,
    kV3 = 12,
    kV4 = 13,
    kChildren = 14,
    DATA_NOT_SET = 0,
  };

  static inline const SerializablePropertyData* internal_default_instance() {
    return reinterpret_cast<const SerializablePropertyData*>(
               &_SerializablePropertyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SerializablePropertyData& a, SerializablePropertyData& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializablePropertyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializablePropertyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializablePropertyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializablePropertyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializablePropertyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializablePropertyData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializablePropertyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SerializablePropertyData";
  }
  protected:
  explicit SerializablePropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU32FieldNumber = 1,
    kU16FieldNumber = 2,
    kU8FieldNumber = 3,
    kI32FieldNumber = 4,
    kI16FieldNumber = 5,
    kI8FieldNumber = 6,
    kFFieldNumber = 7,
    kDFieldNumber = 8,
    kBFieldNumber = 9,
    kI64FieldNumber = 10,
    kV2FieldNumber = 11,
    kV3FieldNumber = 12,
    kV4FieldNumber = 13,
    kChildrenFieldNumber = 14,
  };
  // uint32 u32 = 1;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // uint32 u16 = 2;
  bool has_u16() const;
  private:
  bool _internal_has_u16() const;
  public:
  void clear_u16();
  uint32_t u16() const;
  void set_u16(uint32_t value);
  private:
  uint32_t _internal_u16() const;
  void _internal_set_u16(uint32_t value);
  public:

  // uint32 u8 = 3;
  bool has_u8() const;
  private:
  bool _internal_has_u8() const;
  public:
  void clear_u8();
  uint32_t u8() const;
  void set_u8(uint32_t value);
  private:
  uint32_t _internal_u8() const;
  void _internal_set_u8(uint32_t value);
  public:

  // int32 i32 = 4;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // int32 i16 = 5;
  bool has_i16() const;
  private:
  bool _internal_has_i16() const;
  public:
  void clear_i16();
  int32_t i16() const;
  void set_i16(int32_t value);
  private:
  int32_t _internal_i16() const;
  void _internal_set_i16(int32_t value);
  public:

  // int32 i8 = 6;
  bool has_i8() const;
  private:
  bool _internal_has_i8() const;
  public:
  void clear_i8();
  int32_t i8() const;
  void set_i8(int32_t value);
  private:
  int32_t _internal_i8() const;
  void _internal_set_i8(int32_t value);
  public:

  // float f = 7;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // double d = 8;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // bytes b = 9;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // int64 i64 = 10;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // .EditorGRPC.Vec2 v2 = 11;
  bool has_v2() const;
  private:
  bool _internal_has_v2() const;
  public:
  void clear_v2();
  const ::EditorGRPC::Vec2& v2() const;
  PROTOBUF_NODISCARD ::EditorGRPC::Vec2* release_v2();
  ::EditorGRPC::Vec2* mutable_v2();
  void set_allocated_v2(::EditorGRPC::Vec2* v2);
  private:
  const ::EditorGRPC::Vec2& _internal_v2() const;
  ::EditorGRPC::Vec2* _internal_mutable_v2();
  public:
  void unsafe_arena_set_allocated_v2(
      ::EditorGRPC::Vec2* v2);
  ::EditorGRPC::Vec2* unsafe_arena_release_v2();

  // .EditorGRPC.Vec3 v3 = 12;
  bool has_v3() const;
  private:
  bool _internal_has_v3() const;
  public:
  void clear_v3();
  const ::EditorGRPC::Vec3& v3() const;
  PROTOBUF_NODISCARD ::EditorGRPC::Vec3* release_v3();
  ::EditorGRPC::Vec3* mutable_v3();
  void set_allocated_v3(::EditorGRPC::Vec3* v3);
  private:
  const ::EditorGRPC::Vec3& _internal_v3() const;
  ::EditorGRPC::Vec3* _internal_mutable_v3();
  public:
  void unsafe_arena_set_allocated_v3(
      ::EditorGRPC::Vec3* v3);
  ::EditorGRPC::Vec3* unsafe_arena_release_v3();

  // .EditorGRPC.Vec4 v4 = 13;
  bool has_v4() const;
  private:
  bool _internal_has_v4() const;
  public:
  void clear_v4();
  const ::EditorGRPC::Vec4& v4() const;
  PROTOBUF_NODISCARD ::EditorGRPC::Vec4* release_v4();
  ::EditorGRPC::Vec4* mutable_v4();
  void set_allocated_v4(::EditorGRPC::Vec4* v4);
  private:
  const ::EditorGRPC::Vec4& _internal_v4() const;
  ::EditorGRPC::Vec4* _internal_mutable_v4();
  public:
  void unsafe_arena_set_allocated_v4(
      ::EditorGRPC::Vec4* v4);
  ::EditorGRPC::Vec4* unsafe_arena_release_v4();

  // .EditorGRPC.ChildNodes children = 14;
  bool has_children() const;
  private:
  bool _internal_has_children() const;
  public:
  void clear_children();
  const ::EditorGRPC::ChildNodes& children() const;
  PROTOBUF_NODISCARD ::EditorGRPC::ChildNodes* release_children();
  ::EditorGRPC::ChildNodes* mutable_children();
  void set_allocated_children(::EditorGRPC::ChildNodes* children);
  private:
  const ::EditorGRPC::ChildNodes& _internal_children() const;
  ::EditorGRPC::ChildNodes* _internal_mutable_children();
  public:
  void unsafe_arena_set_allocated_children(
      ::EditorGRPC::ChildNodes* children);
  ::EditorGRPC::ChildNodes* unsafe_arena_release_children();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:EditorGRPC.SerializablePropertyData)
 private:
  class _Internal;
  void set_has_u32();
  void set_has_u16();
  void set_has_u8();
  void set_has_i32();
  void set_has_i16();
  void set_has_i8();
  void set_has_f();
  void set_has_d();
  void set_has_b();
  void set_has_i64();
  void set_has_v2();
  void set_has_v3();
  void set_has_v4();
  void set_has_children();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t u32_;
    uint32_t u16_;
    uint32_t u8_;
    int32_t i32_;
    int32_t i16_;
    int32_t i8_;
    float f_;
    double d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
    int64_t i64_;
    ::EditorGRPC::Vec2* v2_;
    ::EditorGRPC::Vec3* v3_;
    ::EditorGRPC::Vec4* v4_;
    ::EditorGRPC::ChildNodes* children_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SerializableProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SerializableProperty) */ {
 public:
  inline SerializableProperty() : SerializableProperty(nullptr) {}
  ~SerializableProperty() override;
  explicit constexpr SerializableProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializableProperty(const SerializableProperty& from);
  SerializableProperty(SerializableProperty&& from) noexcept
    : SerializableProperty() {
    *this = ::std::move(from);
  }

  inline SerializableProperty& operator=(const SerializableProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializableProperty& operator=(SerializableProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializableProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializableProperty* internal_default_instance() {
    return reinterpret_cast<const SerializableProperty*>(
               &_SerializableProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SerializableProperty& a, SerializableProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializableProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializableProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializableProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializableProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializableProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializableProperty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializableProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SerializableProperty";
  }
  protected:
  explicit SerializableProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SerializableProperty_Type Type;
  static constexpr Type Uint32 =
    SerializableProperty_Type_Uint32;
  static constexpr Type Uint16 =
    SerializableProperty_Type_Uint16;
  static constexpr Type Uint8 =
    SerializableProperty_Type_Uint8;
  static constexpr Type Int32 =
    SerializableProperty_Type_Int32;
  static constexpr Type Int16 =
    SerializableProperty_Type_Int16;
  static constexpr Type Int8 =
    SerializableProperty_Type_Int8;
  static constexpr Type Float =
    SerializableProperty_Type_Float;
  static constexpr Type Double =
    SerializableProperty_Type_Double;
  static constexpr Type Bytes =
    SerializableProperty_Type_Bytes;
  static constexpr Type Vec2 =
    SerializableProperty_Type_Vec2;
  static constexpr Type Vec3 =
    SerializableProperty_Type_Vec3;
  static constexpr Type Vec4 =
    SerializableProperty_Type_Vec4;
  static constexpr Type SerializableNode =
    SerializableProperty_Type_SerializableNode;
  static constexpr Type SerializableNodesArray =
    SerializableProperty_Type_SerializableNodesArray;
  static inline bool Type_IsValid(int value) {
    return SerializableProperty_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SerializableProperty_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SerializableProperty_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SerializableProperty_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SerializableProperty_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SerializableProperty_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SerializableProperty_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .EditorGRPC.SerializablePropertyData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::EditorGRPC::SerializablePropertyData& data() const;
  PROTOBUF_NODISCARD ::EditorGRPC::SerializablePropertyData* release_data();
  ::EditorGRPC::SerializablePropertyData* mutable_data();
  void set_allocated_data(::EditorGRPC::SerializablePropertyData* data);
  private:
  const ::EditorGRPC::SerializablePropertyData& _internal_data() const;
  ::EditorGRPC::SerializablePropertyData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::EditorGRPC::SerializablePropertyData* data);
  ::EditorGRPC::SerializablePropertyData* unsafe_arena_release_data();

  // .EditorGRPC.SerializableProperty.Type type = 2;
  void clear_type();
  ::EditorGRPC::SerializableProperty_Type type() const;
  void set_type(::EditorGRPC::SerializableProperty_Type value);
  private:
  ::EditorGRPC::SerializableProperty_Type _internal_type() const;
  void _internal_set_type(::EditorGRPC::SerializableProperty_Type value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.SerializableProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::EditorGRPC::SerializablePropertyData* data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SetSerializablePropertyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SetSerializablePropertyData) */ {
 public:
  inline SetSerializablePropertyData() : SetSerializablePropertyData(nullptr) {}
  ~SetSerializablePropertyData() override;
  explicit constexpr SetSerializablePropertyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSerializablePropertyData(const SetSerializablePropertyData& from);
  SetSerializablePropertyData(SetSerializablePropertyData&& from) noexcept
    : SetSerializablePropertyData() {
    *this = ::std::move(from);
  }

  inline SetSerializablePropertyData& operator=(const SetSerializablePropertyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSerializablePropertyData& operator=(SetSerializablePropertyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSerializablePropertyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSerializablePropertyData* internal_default_instance() {
    return reinterpret_cast<const SetSerializablePropertyData*>(
               &_SetSerializablePropertyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetSerializablePropertyData& a, SetSerializablePropertyData& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSerializablePropertyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSerializablePropertyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSerializablePropertyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSerializablePropertyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSerializablePropertyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSerializablePropertyData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSerializablePropertyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SetSerializablePropertyData";
  }
  protected:
  explicit SetSerializablePropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kNewValFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .EditorGRPC.SerializableProperty newVal = 1;
  bool has_newval() const;
  private:
  bool _internal_has_newval() const;
  public:
  void clear_newval();
  const ::EditorGRPC::SerializableProperty& newval() const;
  PROTOBUF_NODISCARD ::EditorGRPC::SerializableProperty* release_newval();
  ::EditorGRPC::SerializableProperty* mutable_newval();
  void set_allocated_newval(::EditorGRPC::SerializableProperty* newval);
  private:
  const ::EditorGRPC::SerializableProperty& _internal_newval() const;
  ::EditorGRPC::SerializableProperty* _internal_mutable_newval();
  public:
  void unsafe_arena_set_allocated_newval(
      ::EditorGRPC::SerializableProperty* newval);
  ::EditorGRPC::SerializableProperty* unsafe_arena_release_newval();

  // @@protoc_insertion_point(class_scope:EditorGRPC.SetSerializablePropertyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::EditorGRPC::SerializableProperty* newval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SetSerializablePropertyResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SetSerializablePropertyResult) */ {
 public:
  inline SetSerializablePropertyResult() : SetSerializablePropertyResult(nullptr) {}
  ~SetSerializablePropertyResult() override;
  explicit constexpr SetSerializablePropertyResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSerializablePropertyResult(const SetSerializablePropertyResult& from);
  SetSerializablePropertyResult(SetSerializablePropertyResult&& from) noexcept
    : SetSerializablePropertyResult() {
    *this = ::std::move(from);
  }

  inline SetSerializablePropertyResult& operator=(const SetSerializablePropertyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSerializablePropertyResult& operator=(SetSerializablePropertyResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSerializablePropertyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSerializablePropertyResult* internal_default_instance() {
    return reinterpret_cast<const SetSerializablePropertyResult*>(
               &_SetSerializablePropertyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetSerializablePropertyResult& a, SetSerializablePropertyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSerializablePropertyResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSerializablePropertyResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSerializablePropertyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSerializablePropertyResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSerializablePropertyResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSerializablePropertyResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSerializablePropertyResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SetSerializablePropertyResult";
  }
  protected:
  explicit SetSerializablePropertyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetSerializablePropertyResult_Result Result;
  static constexpr Result SUCCESS =
    SetSerializablePropertyResult_Result_SUCCESS;
  static constexpr Result FAILURE =
    SetSerializablePropertyResult_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return SetSerializablePropertyResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    SetSerializablePropertyResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    SetSerializablePropertyResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    SetSerializablePropertyResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return SetSerializablePropertyResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return SetSerializablePropertyResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return SetSerializablePropertyResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .EditorGRPC.SetSerializablePropertyResult.Result result = 1;
  void clear_result();
  ::EditorGRPC::SetSerializablePropertyResult_Result result() const;
  void set_result(::EditorGRPC::SetSerializablePropertyResult_Result value);
  private:
  ::EditorGRPC::SetSerializablePropertyResult_Result _internal_result() const;
  void _internal_set_result(::EditorGRPC::SetSerializablePropertyResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.SetSerializablePropertyResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SerializablePropertiesNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SerializablePropertiesNode) */ {
 public:
  inline SerializablePropertiesNode() : SerializablePropertiesNode(nullptr) {}
  ~SerializablePropertiesNode() override;
  explicit constexpr SerializablePropertiesNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializablePropertiesNode(const SerializablePropertiesNode& from);
  SerializablePropertiesNode(SerializablePropertiesNode&& from) noexcept
    : SerializablePropertiesNode() {
    *this = ::std::move(from);
  }

  inline SerializablePropertiesNode& operator=(const SerializablePropertiesNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializablePropertiesNode& operator=(SerializablePropertiesNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializablePropertiesNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializablePropertiesNode* internal_default_instance() {
    return reinterpret_cast<const SerializablePropertiesNode*>(
               &_SerializablePropertiesNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SerializablePropertiesNode& a, SerializablePropertiesNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializablePropertiesNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializablePropertiesNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializablePropertiesNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializablePropertiesNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializablePropertiesNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializablePropertiesNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializablePropertiesNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SerializablePropertiesNode";
  }
  protected:
  explicit SerializablePropertiesNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .EditorGRPC.SerializableProperty props = 2;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  ::EditorGRPC::SerializableProperty* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializableProperty >*
      mutable_props();
  private:
  const ::EditorGRPC::SerializableProperty& _internal_props(int index) const;
  ::EditorGRPC::SerializableProperty* _internal_add_props();
  public:
  const ::EditorGRPC::SerializableProperty& props(int index) const;
  ::EditorGRPC::SerializableProperty* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializableProperty >&
      props() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.SerializablePropertiesNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializableProperty > props_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SerializablePropertiesNodes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.SerializablePropertiesNodes) */ {
 public:
  inline SerializablePropertiesNodes() : SerializablePropertiesNodes(nullptr) {}
  ~SerializablePropertiesNodes() override;
  explicit constexpr SerializablePropertiesNodes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializablePropertiesNodes(const SerializablePropertiesNodes& from);
  SerializablePropertiesNodes(SerializablePropertiesNodes&& from) noexcept
    : SerializablePropertiesNodes() {
    *this = ::std::move(from);
  }

  inline SerializablePropertiesNodes& operator=(const SerializablePropertiesNodes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializablePropertiesNodes& operator=(SerializablePropertiesNodes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializablePropertiesNodes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializablePropertiesNodes* internal_default_instance() {
    return reinterpret_cast<const SerializablePropertiesNodes*>(
               &_SerializablePropertiesNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SerializablePropertiesNodes& a, SerializablePropertiesNodes& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializablePropertiesNodes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializablePropertiesNodes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializablePropertiesNodes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializablePropertiesNodes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializablePropertiesNodes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializablePropertiesNodes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializablePropertiesNodes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.SerializablePropertiesNodes";
  }
  protected:
  explicit SerializablePropertiesNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .EditorGRPC.SerializablePropertiesNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::EditorGRPC::SerializablePropertiesNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >*
      mutable_nodes();
  private:
  const ::EditorGRPC::SerializablePropertiesNode& _internal_nodes(int index) const;
  ::EditorGRPC::SerializablePropertiesNode* _internal_add_nodes();
  public:
  const ::EditorGRPC::SerializablePropertiesNode& nodes(int index) const;
  ::EditorGRPC::SerializablePropertiesNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:EditorGRPC.SerializablePropertiesNodes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class FileSavePath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.FileSavePath) */ {
 public:
  inline FileSavePath() : FileSavePath(nullptr) {}
  ~FileSavePath() override;
  explicit constexpr FileSavePath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSavePath(const FileSavePath& from);
  FileSavePath(FileSavePath&& from) noexcept
    : FileSavePath() {
    *this = ::std::move(from);
  }

  inline FileSavePath& operator=(const FileSavePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSavePath& operator=(FileSavePath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSavePath& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSavePath* internal_default_instance() {
    return reinterpret_cast<const FileSavePath*>(
               &_FileSavePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FileSavePath& a, FileSavePath& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSavePath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSavePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSavePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSavePath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSavePath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileSavePath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSavePath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.FileSavePath";
  }
  protected:
  explicit FileSavePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.FileSavePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class FileSaveResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.FileSaveResult) */ {
 public:
  inline FileSaveResult() : FileSaveResult(nullptr) {}
  ~FileSaveResult() override;
  explicit constexpr FileSaveResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSaveResult(const FileSaveResult& from);
  FileSaveResult(FileSaveResult&& from) noexcept
    : FileSaveResult() {
    *this = ::std::move(from);
  }

  inline FileSaveResult& operator=(const FileSaveResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSaveResult& operator=(FileSaveResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSaveResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSaveResult* internal_default_instance() {
    return reinterpret_cast<const FileSaveResult*>(
               &_FileSaveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FileSaveResult& a, FileSaveResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSaveResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSaveResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSaveResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSaveResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSaveResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileSaveResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSaveResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.FileSaveResult";
  }
  protected:
  explicit FileSaveResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileSaveResult_Result Result;
  static constexpr Result SUCCESS =
    FileSaveResult_Result_SUCCESS;
  static constexpr Result FAILURE_PATH_NOT_VALID =
    FileSaveResult_Result_FAILURE_PATH_NOT_VALID;
  static constexpr Result OTHER_FAILURE =
    FileSaveResult_Result_OTHER_FAILURE;
  static inline bool Result_IsValid(int value) {
    return FileSaveResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    FileSaveResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    FileSaveResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    FileSaveResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return FileSaveResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return FileSaveResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return FileSaveResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .EditorGRPC.FileSaveResult.Result result = 1;
  void clear_result();
  ::EditorGRPC::FileSaveResult_Result result() const;
  void set_result(::EditorGRPC::FileSaveResult_Result value);
  private:
  ::EditorGRPC::FileSaveResult_Result _internal_result() const;
  void _internal_set_result(::EditorGRPC::FileSaveResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.FileSaveResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class FrameworkLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.FrameworkLayer) */ {
 public:
  inline FrameworkLayer() : FrameworkLayer(nullptr) {}
  ~FrameworkLayer() override;
  explicit constexpr FrameworkLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameworkLayer(const FrameworkLayer& from);
  FrameworkLayer(FrameworkLayer&& from) noexcept
    : FrameworkLayer() {
    *this = ::std::move(from);
  }

  inline FrameworkLayer& operator=(const FrameworkLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameworkLayer& operator=(FrameworkLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameworkLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameworkLayer* internal_default_instance() {
    return reinterpret_cast<const FrameworkLayer*>(
               &_FrameworkLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FrameworkLayer& a, FrameworkLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameworkLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameworkLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameworkLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameworkLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameworkLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameworkLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameworkLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.FrameworkLayer";
  }
  protected:
  explicit FrameworkLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMasksLayerBelowFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool masksLayerBelow = 1;
  void clear_maskslayerbelow();
  bool maskslayerbelow() const;
  void set_maskslayerbelow(bool value);
  private:
  bool _internal_maskslayerbelow() const;
  void _internal_set_maskslayerbelow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EditorGRPC.FrameworkLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool maskslayerbelow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class UpdatableLayersStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.UpdatableLayersStack) */ {
 public:
  inline UpdatableLayersStack() : UpdatableLayersStack(nullptr) {}
  ~UpdatableLayersStack() override;
  explicit constexpr UpdatableLayersStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatableLayersStack(const UpdatableLayersStack& from);
  UpdatableLayersStack(UpdatableLayersStack&& from) noexcept
    : UpdatableLayersStack() {
    *this = ::std::move(from);
  }

  inline UpdatableLayersStack& operator=(const UpdatableLayersStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatableLayersStack& operator=(UpdatableLayersStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatableLayersStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatableLayersStack* internal_default_instance() {
    return reinterpret_cast<const UpdatableLayersStack*>(
               &_UpdatableLayersStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdatableLayersStack& a, UpdatableLayersStack& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatableLayersStack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatableLayersStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatableLayersStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatableLayersStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatableLayersStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdatableLayersStack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatableLayersStack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.UpdatableLayersStack";
  }
  protected:
  explicit UpdatableLayersStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .EditorGRPC.FrameworkLayer layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::EditorGRPC::FrameworkLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >*
      mutable_layers();
  private:
  const ::EditorGRPC::FrameworkLayer& _internal_layers(int index) const;
  ::EditorGRPC::FrameworkLayer* _internal_add_layers();
  public:
  const ::EditorGRPC::FrameworkLayer& layers(int index) const;
  ::EditorGRPC::FrameworkLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >&
      layers() const;

  // @@protoc_insertion_point(class_scope:EditorGRPC.UpdatableLayersStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class DrawableLayersStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.DrawableLayersStack) */ {
 public:
  inline DrawableLayersStack() : DrawableLayersStack(nullptr) {}
  ~DrawableLayersStack() override;
  explicit constexpr DrawableLayersStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableLayersStack(const DrawableLayersStack& from);
  DrawableLayersStack(DrawableLayersStack&& from) noexcept
    : DrawableLayersStack() {
    *this = ::std::move(from);
  }

  inline DrawableLayersStack& operator=(const DrawableLayersStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableLayersStack& operator=(DrawableLayersStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableLayersStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableLayersStack* internal_default_instance() {
    return reinterpret_cast<const DrawableLayersStack*>(
               &_DrawableLayersStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DrawableLayersStack& a, DrawableLayersStack& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableLayersStack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableLayersStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableLayersStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableLayersStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableLayersStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DrawableLayersStack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableLayersStack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.DrawableLayersStack";
  }
  protected:
  explicit DrawableLayersStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .EditorGRPC.FrameworkLayer layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::EditorGRPC::FrameworkLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >*
      mutable_layers();
  private:
  const ::EditorGRPC::FrameworkLayer& _internal_layers(int index) const;
  ::EditorGRPC::FrameworkLayer* _internal_add_layers();
  public:
  const ::EditorGRPC::FrameworkLayer& layers(int index) const;
  ::EditorGRPC::FrameworkLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >&
      layers() const;

  // @@protoc_insertion_point(class_scope:EditorGRPC.DrawableLayersStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class InputLayersStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.InputLayersStack) */ {
 public:
  inline InputLayersStack() : InputLayersStack(nullptr) {}
  ~InputLayersStack() override;
  explicit constexpr InputLayersStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputLayersStack(const InputLayersStack& from);
  InputLayersStack(InputLayersStack&& from) noexcept
    : InputLayersStack() {
    *this = ::std::move(from);
  }

  inline InputLayersStack& operator=(const InputLayersStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputLayersStack& operator=(InputLayersStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputLayersStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputLayersStack* internal_default_instance() {
    return reinterpret_cast<const InputLayersStack*>(
               &_InputLayersStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(InputLayersStack& a, InputLayersStack& b) {
    a.Swap(&b);
  }
  inline void Swap(InputLayersStack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputLayersStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputLayersStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputLayersStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputLayersStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputLayersStack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputLayersStack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.InputLayersStack";
  }
  protected:
  explicit InputLayersStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .EditorGRPC.FrameworkLayer layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::EditorGRPC::FrameworkLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >*
      mutable_layers();
  private:
  const ::EditorGRPC::FrameworkLayer& _internal_layers(int index) const;
  ::EditorGRPC::FrameworkLayer* _internal_add_layers();
  public:
  const ::EditorGRPC::FrameworkLayer& layers(int index) const;
  ::EditorGRPC::FrameworkLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >&
      layers() const;

  // @@protoc_insertion_point(class_scope:EditorGRPC.InputLayersStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class GameFrameworkLayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditorGRPC.GameFrameworkLayers) */ {
 public:
  inline GameFrameworkLayers() : GameFrameworkLayers(nullptr) {}
  ~GameFrameworkLayers() override;
  explicit constexpr GameFrameworkLayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameFrameworkLayers(const GameFrameworkLayers& from);
  GameFrameworkLayers(GameFrameworkLayers&& from) noexcept
    : GameFrameworkLayers() {
    *this = ::std::move(from);
  }

  inline GameFrameworkLayers& operator=(const GameFrameworkLayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFrameworkLayers& operator=(GameFrameworkLayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameFrameworkLayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameFrameworkLayers* internal_default_instance() {
    return reinterpret_cast<const GameFrameworkLayers*>(
               &_GameFrameworkLayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GameFrameworkLayers& a, GameFrameworkLayers& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFrameworkLayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameFrameworkLayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameFrameworkLayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameFrameworkLayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameFrameworkLayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameFrameworkLayers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFrameworkLayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditorGRPC.GameFrameworkLayers";
  }
  protected:
  explicit GameFrameworkLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatableFieldNumber = 1,
    kDrawableFieldNumber = 2,
    kInputFieldNumber = 3,
  };
  // .EditorGRPC.UpdatableLayersStack updatable = 1;
  bool has_updatable() const;
  private:
  bool _internal_has_updatable() const;
  public:
  void clear_updatable();
  const ::EditorGRPC::UpdatableLayersStack& updatable() const;
  PROTOBUF_NODISCARD ::EditorGRPC::UpdatableLayersStack* release_updatable();
  ::EditorGRPC::UpdatableLayersStack* mutable_updatable();
  void set_allocated_updatable(::EditorGRPC::UpdatableLayersStack* updatable);
  private:
  const ::EditorGRPC::UpdatableLayersStack& _internal_updatable() const;
  ::EditorGRPC::UpdatableLayersStack* _internal_mutable_updatable();
  public:
  void unsafe_arena_set_allocated_updatable(
      ::EditorGRPC::UpdatableLayersStack* updatable);
  ::EditorGRPC::UpdatableLayersStack* unsafe_arena_release_updatable();

  // .EditorGRPC.DrawableLayersStack drawable = 2;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::EditorGRPC::DrawableLayersStack& drawable() const;
  PROTOBUF_NODISCARD ::EditorGRPC::DrawableLayersStack* release_drawable();
  ::EditorGRPC::DrawableLayersStack* mutable_drawable();
  void set_allocated_drawable(::EditorGRPC::DrawableLayersStack* drawable);
  private:
  const ::EditorGRPC::DrawableLayersStack& _internal_drawable() const;
  ::EditorGRPC::DrawableLayersStack* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::EditorGRPC::DrawableLayersStack* drawable);
  ::EditorGRPC::DrawableLayersStack* unsafe_arena_release_drawable();

  // .EditorGRPC.InputLayersStack input = 3;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::EditorGRPC::InputLayersStack& input() const;
  PROTOBUF_NODISCARD ::EditorGRPC::InputLayersStack* release_input();
  ::EditorGRPC::InputLayersStack* mutable_input();
  void set_allocated_input(::EditorGRPC::InputLayersStack* input);
  private:
  const ::EditorGRPC::InputLayersStack& _internal_input() const;
  ::EditorGRPC::InputLayersStack* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::EditorGRPC::InputLayersStack* input);
  ::EditorGRPC::InputLayersStack* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:EditorGRPC.GameFrameworkLayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::EditorGRPC::UpdatableLayersStack* updatable_;
  ::EditorGRPC::DrawableLayersStack* drawable_;
  ::EditorGRPC::InputLayersStack* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline int32_t Point::_internal_x() const {
  return x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline int32_t Point::_internal_y() const {
  return y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Point.y)
}

// int32 z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline int32_t Point::_internal_z() const {
  return z_;
}
inline int32_t Point::z() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(int32_t value) {
  
  z_ = value;
}
inline void Point::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Point.z)
}

// -------------------------------------------------------------------

// BlockEdit

// int32 x = 1;
inline void BlockEdit::clear_x() {
  x_ = 0;
}
inline int32_t BlockEdit::_internal_x() const {
  return x_;
}
inline int32_t BlockEdit::x() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockEdit.x)
  return _internal_x();
}
inline void BlockEdit::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void BlockEdit::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockEdit.x)
}

// int32 y = 2;
inline void BlockEdit::clear_y() {
  y_ = 0;
}
inline int32_t BlockEdit::_internal_y() const {
  return y_;
}
inline int32_t BlockEdit::y() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockEdit.y)
  return _internal_y();
}
inline void BlockEdit::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void BlockEdit::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockEdit.y)
}

// int32 z = 3;
inline void BlockEdit::clear_z() {
  z_ = 0;
}
inline int32_t BlockEdit::_internal_z() const {
  return z_;
}
inline int32_t BlockEdit::z() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockEdit.z)
  return _internal_z();
}
inline void BlockEdit::_internal_set_z(int32_t value) {
  
  z_ = value;
}
inline void BlockEdit::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockEdit.z)
}

// int32 newval = 4;
inline void BlockEdit::clear_newval() {
  newval_ = 0;
}
inline int32_t BlockEdit::_internal_newval() const {
  return newval_;
}
inline int32_t BlockEdit::newval() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockEdit.newval)
  return _internal_newval();
}
inline void BlockEdit::_internal_set_newval(int32_t value) {
  
  newval_ = value;
}
inline void BlockEdit::set_newval(int32_t value) {
  _internal_set_newval(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockEdit.newval)
}

// -------------------------------------------------------------------

// EditBlockResult

// .EditorGRPC.EditBlockResult.Result result = 1;
inline void EditBlockResult::clear_result() {
  result_ = 0;
}
inline ::EditorGRPC::EditBlockResult_Result EditBlockResult::_internal_result() const {
  return static_cast< ::EditorGRPC::EditBlockResult_Result >(result_);
}
inline ::EditorGRPC::EditBlockResult_Result EditBlockResult::result() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.EditBlockResult.result)
  return _internal_result();
}
inline void EditBlockResult::_internal_set_result(::EditorGRPC::EditBlockResult_Result value) {
  
  result_ = value;
}
inline void EditBlockResult::set_result(::EditorGRPC::EditBlockResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.EditBlockResult.result)
}

// int32 blockCode = 2;
inline void EditBlockResult::clear_blockcode() {
  blockcode_ = 0;
}
inline int32_t EditBlockResult::_internal_blockcode() const {
  return blockcode_;
}
inline int32_t EditBlockResult::blockcode() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.EditBlockResult.blockCode)
  return _internal_blockcode();
}
inline void EditBlockResult::_internal_set_blockcode(int32_t value) {
  
  blockcode_ = value;
}
inline void EditBlockResult::set_blockcode(int32_t value) {
  _internal_set_blockcode(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.EditBlockResult.blockCode)
}

// string errorMessage = 3;
inline void EditBlockResult::clear_errormessage() {
  errormessage_.ClearToEmpty();
}
inline const std::string& EditBlockResult::errormessage() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.EditBlockResult.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EditBlockResult::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.EditBlockResult.errorMessage)
}
inline std::string* EditBlockResult::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.EditBlockResult.errorMessage)
  return _s;
}
inline const std::string& EditBlockResult::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void EditBlockResult::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EditBlockResult::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EditBlockResult::release_errormessage() {
  // @@protoc_insertion_point(field_release:EditorGRPC.EditBlockResult.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EditBlockResult::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errormessage_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.EditBlockResult.errorMessage)
}

// int32 finalZValue = 4;
inline void EditBlockResult::clear_finalzvalue() {
  finalzvalue_ = 0;
}
inline int32_t EditBlockResult::_internal_finalzvalue() const {
  return finalzvalue_;
}
inline int32_t EditBlockResult::finalzvalue() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.EditBlockResult.finalZValue)
  return _internal_finalzvalue();
}
inline void EditBlockResult::_internal_set_finalzvalue(int32_t value) {
  
  finalzvalue_ = value;
}
inline void EditBlockResult::set_finalzvalue(int32_t value) {
  _internal_set_finalzvalue(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.EditBlockResult.finalZValue)
}

// float fallTimeSeconds = 5;
inline void EditBlockResult::clear_falltimeseconds() {
  falltimeseconds_ = 0;
}
inline float EditBlockResult::_internal_falltimeseconds() const {
  return falltimeseconds_;
}
inline float EditBlockResult::falltimeseconds() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.EditBlockResult.fallTimeSeconds)
  return _internal_falltimeseconds();
}
inline void EditBlockResult::_internal_set_falltimeseconds(float value) {
  
  falltimeseconds_ = value;
}
inline void EditBlockResult::set_falltimeseconds(float value) {
  _internal_set_falltimeseconds(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.EditBlockResult.fallTimeSeconds)
}

// -------------------------------------------------------------------

// SetBoardDescriptionResult

// .EditorGRPC.SetBoardDescriptionResult.Result result = 1;
inline void SetBoardDescriptionResult::clear_result() {
  result_ = 0;
}
inline ::EditorGRPC::SetBoardDescriptionResult_Result SetBoardDescriptionResult::_internal_result() const {
  return static_cast< ::EditorGRPC::SetBoardDescriptionResult_Result >(result_);
}
inline ::EditorGRPC::SetBoardDescriptionResult_Result SetBoardDescriptionResult::result() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SetBoardDescriptionResult.result)
  return _internal_result();
}
inline void SetBoardDescriptionResult::_internal_set_result(::EditorGRPC::SetBoardDescriptionResult_Result value) {
  
  result_ = value;
}
inline void SetBoardDescriptionResult::set_result(::EditorGRPC::SetBoardDescriptionResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SetBoardDescriptionResult.result)
}

// -------------------------------------------------------------------

// Void

// -------------------------------------------------------------------

// BoardDescription

// int32 width = 1;
inline void BoardDescription::clear_width() {
  width_ = 0;
}
inline int32_t BoardDescription::_internal_width() const {
  return width_;
}
inline int32_t BoardDescription::width() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BoardDescription.width)
  return _internal_width();
}
inline void BoardDescription::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void BoardDescription::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BoardDescription.width)
}

// int32 height = 2;
inline void BoardDescription::clear_height() {
  height_ = 0;
}
inline int32_t BoardDescription::_internal_height() const {
  return height_;
}
inline int32_t BoardDescription::height() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BoardDescription.height)
  return _internal_height();
}
inline void BoardDescription::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void BoardDescription::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BoardDescription.height)
}

// int32 depth = 3;
inline void BoardDescription::clear_depth() {
  depth_ = 0;
}
inline int32_t BoardDescription::_internal_depth() const {
  return depth_;
}
inline int32_t BoardDescription::depth() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BoardDescription.depth)
  return _internal_depth();
}
inline void BoardDescription::_internal_set_depth(int32_t value) {
  
  depth_ = value;
}
inline void BoardDescription::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BoardDescription.depth)
}

// bytes data = 4;
inline void BoardDescription::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BoardDescription::data() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BoardDescription.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoardDescription::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.BoardDescription.data)
}
inline std::string* BoardDescription::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.BoardDescription.data)
  return _s;
}
inline const std::string& BoardDescription::_internal_data() const {
  return data_.Get();
}
inline void BoardDescription::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BoardDescription::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BoardDescription::release_data() {
  // @@protoc_insertion_point(field_release:EditorGRPC.BoardDescription.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BoardDescription::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.BoardDescription.data)
}

// -------------------------------------------------------------------

// ClientInfo

// -------------------------------------------------------------------

// BlockType

// int32 gameEngineCode = 1;
inline void BlockType::clear_gameenginecode() {
  gameenginecode_ = 0;
}
inline int32_t BlockType::_internal_gameenginecode() const {
  return gameenginecode_;
}
inline int32_t BlockType::gameenginecode() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockType.gameEngineCode)
  return _internal_gameenginecode();
}
inline void BlockType::_internal_set_gameenginecode(int32_t value) {
  
  gameenginecode_ = value;
}
inline void BlockType::set_gameenginecode(int32_t value) {
  _internal_set_gameenginecode(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockType.gameEngineCode)
}

// float red = 2;
inline void BlockType::clear_red() {
  red_ = 0;
}
inline float BlockType::_internal_red() const {
  return red_;
}
inline float BlockType::red() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockType.red)
  return _internal_red();
}
inline void BlockType::_internal_set_red(float value) {
  
  red_ = value;
}
inline void BlockType::set_red(float value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockType.red)
}

// float green = 3;
inline void BlockType::clear_green() {
  green_ = 0;
}
inline float BlockType::_internal_green() const {
  return green_;
}
inline float BlockType::green() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockType.green)
  return _internal_green();
}
inline void BlockType::_internal_set_green(float value) {
  
  green_ = value;
}
inline void BlockType::set_green(float value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockType.green)
}

// float blue = 4;
inline void BlockType::clear_blue() {
  blue_ = 0;
}
inline float BlockType::_internal_blue() const {
  return blue_;
}
inline float BlockType::blue() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockType.blue)
  return _internal_blue();
}
inline void BlockType::_internal_set_blue(float value) {
  
  blue_ = value;
}
inline void BlockType::set_blue(float value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockType.blue)
}

// float alpha = 5;
inline void BlockType::clear_alpha() {
  alpha_ = 0;
}
inline float BlockType::_internal_alpha() const {
  return alpha_;
}
inline float BlockType::alpha() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.BlockType.alpha)
  return _internal_alpha();
}
inline void BlockType::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void BlockType::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.BlockType.alpha)
}

// -------------------------------------------------------------------

// GameSettings

// repeated .EditorGRPC.BlockType possibleBlocks = 1;
inline int GameSettings::_internal_possibleblocks_size() const {
  return possibleblocks_.size();
}
inline int GameSettings::possibleblocks_size() const {
  return _internal_possibleblocks_size();
}
inline void GameSettings::clear_possibleblocks() {
  possibleblocks_.Clear();
}
inline ::EditorGRPC::BlockType* GameSettings::mutable_possibleblocks(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.GameSettings.possibleBlocks)
  return possibleblocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::BlockType >*
GameSettings::mutable_possibleblocks() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.GameSettings.possibleBlocks)
  return &possibleblocks_;
}
inline const ::EditorGRPC::BlockType& GameSettings::_internal_possibleblocks(int index) const {
  return possibleblocks_.Get(index);
}
inline const ::EditorGRPC::BlockType& GameSettings::possibleblocks(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.GameSettings.possibleBlocks)
  return _internal_possibleblocks(index);
}
inline ::EditorGRPC::BlockType* GameSettings::_internal_add_possibleblocks() {
  return possibleblocks_.Add();
}
inline ::EditorGRPC::BlockType* GameSettings::add_possibleblocks() {
  ::EditorGRPC::BlockType* _add = _internal_add_possibleblocks();
  // @@protoc_insertion_point(field_add:EditorGRPC.GameSettings.possibleBlocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::BlockType >&
GameSettings::possibleblocks() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.GameSettings.possibleBlocks)
  return possibleblocks_;
}

// -------------------------------------------------------------------

// Vec2

// float x = 1;
inline void Vec2::clear_x() {
  x_ = 0;
}
inline float Vec2::_internal_x() const {
  return x_;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec2.x)
  return _internal_x();
}
inline void Vec2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec2.x)
}

// float y = 2;
inline void Vec2::clear_y() {
  y_ = 0;
}
inline float Vec2::_internal_y() const {
  return y_;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec2.y)
  return _internal_y();
}
inline void Vec2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec2.y)
}

// -------------------------------------------------------------------

// Vec3

// float x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline float Vec3::_internal_x() const {
  return x_;
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec3.x)
  return _internal_x();
}
inline void Vec3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec3.x)
}

// float y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline float Vec3::_internal_y() const {
  return y_;
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec3.y)
  return _internal_y();
}
inline void Vec3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec3.y)
}

// float z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline float Vec3::_internal_z() const {
  return z_;
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec3.z)
  return _internal_z();
}
inline void Vec3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vec3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec3.z)
}

// -------------------------------------------------------------------

// Vec4

// float r = 1;
inline void Vec4::clear_r() {
  r_ = 0;
}
inline float Vec4::_internal_r() const {
  return r_;
}
inline float Vec4::r() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec4.r)
  return _internal_r();
}
inline void Vec4::_internal_set_r(float value) {
  
  r_ = value;
}
inline void Vec4::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec4.r)
}

// float g = 2;
inline void Vec4::clear_g() {
  g_ = 0;
}
inline float Vec4::_internal_g() const {
  return g_;
}
inline float Vec4::g() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec4.g)
  return _internal_g();
}
inline void Vec4::_internal_set_g(float value) {
  
  g_ = value;
}
inline void Vec4::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec4.g)
}

// float b = 3;
inline void Vec4::clear_b() {
  b_ = 0;
}
inline float Vec4::_internal_b() const {
  return b_;
}
inline float Vec4::b() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec4.b)
  return _internal_b();
}
inline void Vec4::_internal_set_b(float value) {
  
  b_ = value;
}
inline void Vec4::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec4.b)
}

// float a = 4;
inline void Vec4::clear_a() {
  a_ = 0;
}
inline float Vec4::_internal_a() const {
  return a_;
}
inline float Vec4::a() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.Vec4.a)
  return _internal_a();
}
inline void Vec4::_internal_set_a(float value) {
  
  a_ = value;
}
inline void Vec4::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.Vec4.a)
}

// -------------------------------------------------------------------

// ChildNodes

// repeated .EditorGRPC.SerializablePropertiesNode nodes = 1;
inline int ChildNodes::_internal_nodes_size() const {
  return nodes_.size();
}
inline int ChildNodes::nodes_size() const {
  return _internal_nodes_size();
}
inline void ChildNodes::clear_nodes() {
  nodes_.Clear();
}
inline ::EditorGRPC::SerializablePropertiesNode* ChildNodes::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.ChildNodes.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >*
ChildNodes::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.ChildNodes.nodes)
  return &nodes_;
}
inline const ::EditorGRPC::SerializablePropertiesNode& ChildNodes::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::EditorGRPC::SerializablePropertiesNode& ChildNodes::nodes(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.ChildNodes.nodes)
  return _internal_nodes(index);
}
inline ::EditorGRPC::SerializablePropertiesNode* ChildNodes::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::EditorGRPC::SerializablePropertiesNode* ChildNodes::add_nodes() {
  ::EditorGRPC::SerializablePropertiesNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:EditorGRPC.ChildNodes.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >&
ChildNodes::nodes() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.ChildNodes.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// SerializablePropertyData

// uint32 u32 = 1;
inline bool SerializablePropertyData::_internal_has_u32() const {
  return data_case() == kU32;
}
inline bool SerializablePropertyData::has_u32() const {
  return _internal_has_u32();
}
inline void SerializablePropertyData::set_has_u32() {
  _oneof_case_[0] = kU32;
}
inline void SerializablePropertyData::clear_u32() {
  if (_internal_has_u32()) {
    data_.u32_ = 0u;
    clear_has_data();
  }
}
inline uint32_t SerializablePropertyData::_internal_u32() const {
  if (_internal_has_u32()) {
    return data_.u32_;
  }
  return 0u;
}
inline void SerializablePropertyData::_internal_set_u32(uint32_t value) {
  if (!_internal_has_u32()) {
    clear_data();
    set_has_u32();
  }
  data_.u32_ = value;
}
inline uint32_t SerializablePropertyData::u32() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.u32)
  return _internal_u32();
}
inline void SerializablePropertyData::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.u32)
}

// uint32 u16 = 2;
inline bool SerializablePropertyData::_internal_has_u16() const {
  return data_case() == kU16;
}
inline bool SerializablePropertyData::has_u16() const {
  return _internal_has_u16();
}
inline void SerializablePropertyData::set_has_u16() {
  _oneof_case_[0] = kU16;
}
inline void SerializablePropertyData::clear_u16() {
  if (_internal_has_u16()) {
    data_.u16_ = 0u;
    clear_has_data();
  }
}
inline uint32_t SerializablePropertyData::_internal_u16() const {
  if (_internal_has_u16()) {
    return data_.u16_;
  }
  return 0u;
}
inline void SerializablePropertyData::_internal_set_u16(uint32_t value) {
  if (!_internal_has_u16()) {
    clear_data();
    set_has_u16();
  }
  data_.u16_ = value;
}
inline uint32_t SerializablePropertyData::u16() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.u16)
  return _internal_u16();
}
inline void SerializablePropertyData::set_u16(uint32_t value) {
  _internal_set_u16(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.u16)
}

// uint32 u8 = 3;
inline bool SerializablePropertyData::_internal_has_u8() const {
  return data_case() == kU8;
}
inline bool SerializablePropertyData::has_u8() const {
  return _internal_has_u8();
}
inline void SerializablePropertyData::set_has_u8() {
  _oneof_case_[0] = kU8;
}
inline void SerializablePropertyData::clear_u8() {
  if (_internal_has_u8()) {
    data_.u8_ = 0u;
    clear_has_data();
  }
}
inline uint32_t SerializablePropertyData::_internal_u8() const {
  if (_internal_has_u8()) {
    return data_.u8_;
  }
  return 0u;
}
inline void SerializablePropertyData::_internal_set_u8(uint32_t value) {
  if (!_internal_has_u8()) {
    clear_data();
    set_has_u8();
  }
  data_.u8_ = value;
}
inline uint32_t SerializablePropertyData::u8() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.u8)
  return _internal_u8();
}
inline void SerializablePropertyData::set_u8(uint32_t value) {
  _internal_set_u8(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.u8)
}

// int32 i32 = 4;
inline bool SerializablePropertyData::_internal_has_i32() const {
  return data_case() == kI32;
}
inline bool SerializablePropertyData::has_i32() const {
  return _internal_has_i32();
}
inline void SerializablePropertyData::set_has_i32() {
  _oneof_case_[0] = kI32;
}
inline void SerializablePropertyData::clear_i32() {
  if (_internal_has_i32()) {
    data_.i32_ = 0;
    clear_has_data();
  }
}
inline int32_t SerializablePropertyData::_internal_i32() const {
  if (_internal_has_i32()) {
    return data_.i32_;
  }
  return 0;
}
inline void SerializablePropertyData::_internal_set_i32(int32_t value) {
  if (!_internal_has_i32()) {
    clear_data();
    set_has_i32();
  }
  data_.i32_ = value;
}
inline int32_t SerializablePropertyData::i32() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.i32)
  return _internal_i32();
}
inline void SerializablePropertyData::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.i32)
}

// int32 i16 = 5;
inline bool SerializablePropertyData::_internal_has_i16() const {
  return data_case() == kI16;
}
inline bool SerializablePropertyData::has_i16() const {
  return _internal_has_i16();
}
inline void SerializablePropertyData::set_has_i16() {
  _oneof_case_[0] = kI16;
}
inline void SerializablePropertyData::clear_i16() {
  if (_internal_has_i16()) {
    data_.i16_ = 0;
    clear_has_data();
  }
}
inline int32_t SerializablePropertyData::_internal_i16() const {
  if (_internal_has_i16()) {
    return data_.i16_;
  }
  return 0;
}
inline void SerializablePropertyData::_internal_set_i16(int32_t value) {
  if (!_internal_has_i16()) {
    clear_data();
    set_has_i16();
  }
  data_.i16_ = value;
}
inline int32_t SerializablePropertyData::i16() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.i16)
  return _internal_i16();
}
inline void SerializablePropertyData::set_i16(int32_t value) {
  _internal_set_i16(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.i16)
}

// int32 i8 = 6;
inline bool SerializablePropertyData::_internal_has_i8() const {
  return data_case() == kI8;
}
inline bool SerializablePropertyData::has_i8() const {
  return _internal_has_i8();
}
inline void SerializablePropertyData::set_has_i8() {
  _oneof_case_[0] = kI8;
}
inline void SerializablePropertyData::clear_i8() {
  if (_internal_has_i8()) {
    data_.i8_ = 0;
    clear_has_data();
  }
}
inline int32_t SerializablePropertyData::_internal_i8() const {
  if (_internal_has_i8()) {
    return data_.i8_;
  }
  return 0;
}
inline void SerializablePropertyData::_internal_set_i8(int32_t value) {
  if (!_internal_has_i8()) {
    clear_data();
    set_has_i8();
  }
  data_.i8_ = value;
}
inline int32_t SerializablePropertyData::i8() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.i8)
  return _internal_i8();
}
inline void SerializablePropertyData::set_i8(int32_t value) {
  _internal_set_i8(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.i8)
}

// float f = 7;
inline bool SerializablePropertyData::_internal_has_f() const {
  return data_case() == kF;
}
inline bool SerializablePropertyData::has_f() const {
  return _internal_has_f();
}
inline void SerializablePropertyData::set_has_f() {
  _oneof_case_[0] = kF;
}
inline void SerializablePropertyData::clear_f() {
  if (_internal_has_f()) {
    data_.f_ = 0;
    clear_has_data();
  }
}
inline float SerializablePropertyData::_internal_f() const {
  if (_internal_has_f()) {
    return data_.f_;
  }
  return 0;
}
inline void SerializablePropertyData::_internal_set_f(float value) {
  if (!_internal_has_f()) {
    clear_data();
    set_has_f();
  }
  data_.f_ = value;
}
inline float SerializablePropertyData::f() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.f)
  return _internal_f();
}
inline void SerializablePropertyData::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.f)
}

// double d = 8;
inline bool SerializablePropertyData::_internal_has_d() const {
  return data_case() == kD;
}
inline bool SerializablePropertyData::has_d() const {
  return _internal_has_d();
}
inline void SerializablePropertyData::set_has_d() {
  _oneof_case_[0] = kD;
}
inline void SerializablePropertyData::clear_d() {
  if (_internal_has_d()) {
    data_.d_ = 0;
    clear_has_data();
  }
}
inline double SerializablePropertyData::_internal_d() const {
  if (_internal_has_d()) {
    return data_.d_;
  }
  return 0;
}
inline void SerializablePropertyData::_internal_set_d(double value) {
  if (!_internal_has_d()) {
    clear_data();
    set_has_d();
  }
  data_.d_ = value;
}
inline double SerializablePropertyData::d() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.d)
  return _internal_d();
}
inline void SerializablePropertyData::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.d)
}

// bytes b = 9;
inline bool SerializablePropertyData::_internal_has_b() const {
  return data_case() == kB;
}
inline bool SerializablePropertyData::has_b() const {
  return _internal_has_b();
}
inline void SerializablePropertyData::set_has_b() {
  _oneof_case_[0] = kB;
}
inline void SerializablePropertyData::clear_b() {
  if (_internal_has_b()) {
    data_.b_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& SerializablePropertyData::b() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline void SerializablePropertyData::set_b(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_b()) {
    clear_data();
    set_has_b();
    data_.b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.b_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.b)
}
inline std::string* SerializablePropertyData::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertyData.b)
  return _s;
}
inline const std::string& SerializablePropertyData::_internal_b() const {
  if (_internal_has_b()) {
    return data_.b_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SerializablePropertyData::_internal_set_b(const std::string& value) {
  if (!_internal_has_b()) {
    clear_data();
    set_has_b();
    data_.b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializablePropertyData::_internal_mutable_b() {
  if (!_internal_has_b()) {
    clear_data();
    set_has_b();
    data_.b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.b_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializablePropertyData::release_b() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializablePropertyData.b)
  if (_internal_has_b()) {
    clear_has_data();
    return data_.b_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SerializablePropertyData::set_allocated_b(std::string* b) {
  if (has_data()) {
    clear_data();
  }
  if (b != nullptr) {
    set_has_b();
    data_.b_.UnsafeSetDefault(b);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(b);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.SerializablePropertyData.b)
}

// int64 i64 = 10;
inline bool SerializablePropertyData::_internal_has_i64() const {
  return data_case() == kI64;
}
inline bool SerializablePropertyData::has_i64() const {
  return _internal_has_i64();
}
inline void SerializablePropertyData::set_has_i64() {
  _oneof_case_[0] = kI64;
}
inline void SerializablePropertyData::clear_i64() {
  if (_internal_has_i64()) {
    data_.i64_ = int64_t{0};
    clear_has_data();
  }
}
inline int64_t SerializablePropertyData::_internal_i64() const {
  if (_internal_has_i64()) {
    return data_.i64_;
  }
  return int64_t{0};
}
inline void SerializablePropertyData::_internal_set_i64(int64_t value) {
  if (!_internal_has_i64()) {
    clear_data();
    set_has_i64();
  }
  data_.i64_ = value;
}
inline int64_t SerializablePropertyData::i64() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.i64)
  return _internal_i64();
}
inline void SerializablePropertyData::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertyData.i64)
}

// .EditorGRPC.Vec2 v2 = 11;
inline bool SerializablePropertyData::_internal_has_v2() const {
  return data_case() == kV2;
}
inline bool SerializablePropertyData::has_v2() const {
  return _internal_has_v2();
}
inline void SerializablePropertyData::set_has_v2() {
  _oneof_case_[0] = kV2;
}
inline void SerializablePropertyData::clear_v2() {
  if (_internal_has_v2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.v2_;
    }
    clear_has_data();
  }
}
inline ::EditorGRPC::Vec2* SerializablePropertyData::release_v2() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializablePropertyData.v2)
  if (_internal_has_v2()) {
    clear_has_data();
      ::EditorGRPC::Vec2* temp = data_.v2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EditorGRPC::Vec2& SerializablePropertyData::_internal_v2() const {
  return _internal_has_v2()
      ? *data_.v2_
      : reinterpret_cast< ::EditorGRPC::Vec2&>(::EditorGRPC::_Vec2_default_instance_);
}
inline const ::EditorGRPC::Vec2& SerializablePropertyData::v2() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.v2)
  return _internal_v2();
}
inline ::EditorGRPC::Vec2* SerializablePropertyData::unsafe_arena_release_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:EditorGRPC.SerializablePropertyData.v2)
  if (_internal_has_v2()) {
    clear_has_data();
    ::EditorGRPC::Vec2* temp = data_.v2_;
    data_.v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializablePropertyData::unsafe_arena_set_allocated_v2(::EditorGRPC::Vec2* v2) {
  clear_data();
  if (v2) {
    set_has_v2();
    data_.v2_ = v2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.SerializablePropertyData.v2)
}
inline ::EditorGRPC::Vec2* SerializablePropertyData::_internal_mutable_v2() {
  if (!_internal_has_v2()) {
    clear_data();
    set_has_v2();
    data_.v2_ = CreateMaybeMessage< ::EditorGRPC::Vec2 >(GetArenaForAllocation());
  }
  return data_.v2_;
}
inline ::EditorGRPC::Vec2* SerializablePropertyData::mutable_v2() {
  ::EditorGRPC::Vec2* _msg = _internal_mutable_v2();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertyData.v2)
  return _msg;
}

// .EditorGRPC.Vec3 v3 = 12;
inline bool SerializablePropertyData::_internal_has_v3() const {
  return data_case() == kV3;
}
inline bool SerializablePropertyData::has_v3() const {
  return _internal_has_v3();
}
inline void SerializablePropertyData::set_has_v3() {
  _oneof_case_[0] = kV3;
}
inline void SerializablePropertyData::clear_v3() {
  if (_internal_has_v3()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.v3_;
    }
    clear_has_data();
  }
}
inline ::EditorGRPC::Vec3* SerializablePropertyData::release_v3() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializablePropertyData.v3)
  if (_internal_has_v3()) {
    clear_has_data();
      ::EditorGRPC::Vec3* temp = data_.v3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.v3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EditorGRPC::Vec3& SerializablePropertyData::_internal_v3() const {
  return _internal_has_v3()
      ? *data_.v3_
      : reinterpret_cast< ::EditorGRPC::Vec3&>(::EditorGRPC::_Vec3_default_instance_);
}
inline const ::EditorGRPC::Vec3& SerializablePropertyData::v3() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.v3)
  return _internal_v3();
}
inline ::EditorGRPC::Vec3* SerializablePropertyData::unsafe_arena_release_v3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:EditorGRPC.SerializablePropertyData.v3)
  if (_internal_has_v3()) {
    clear_has_data();
    ::EditorGRPC::Vec3* temp = data_.v3_;
    data_.v3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializablePropertyData::unsafe_arena_set_allocated_v3(::EditorGRPC::Vec3* v3) {
  clear_data();
  if (v3) {
    set_has_v3();
    data_.v3_ = v3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.SerializablePropertyData.v3)
}
inline ::EditorGRPC::Vec3* SerializablePropertyData::_internal_mutable_v3() {
  if (!_internal_has_v3()) {
    clear_data();
    set_has_v3();
    data_.v3_ = CreateMaybeMessage< ::EditorGRPC::Vec3 >(GetArenaForAllocation());
  }
  return data_.v3_;
}
inline ::EditorGRPC::Vec3* SerializablePropertyData::mutable_v3() {
  ::EditorGRPC::Vec3* _msg = _internal_mutable_v3();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertyData.v3)
  return _msg;
}

// .EditorGRPC.Vec4 v4 = 13;
inline bool SerializablePropertyData::_internal_has_v4() const {
  return data_case() == kV4;
}
inline bool SerializablePropertyData::has_v4() const {
  return _internal_has_v4();
}
inline void SerializablePropertyData::set_has_v4() {
  _oneof_case_[0] = kV4;
}
inline void SerializablePropertyData::clear_v4() {
  if (_internal_has_v4()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.v4_;
    }
    clear_has_data();
  }
}
inline ::EditorGRPC::Vec4* SerializablePropertyData::release_v4() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializablePropertyData.v4)
  if (_internal_has_v4()) {
    clear_has_data();
      ::EditorGRPC::Vec4* temp = data_.v4_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.v4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EditorGRPC::Vec4& SerializablePropertyData::_internal_v4() const {
  return _internal_has_v4()
      ? *data_.v4_
      : reinterpret_cast< ::EditorGRPC::Vec4&>(::EditorGRPC::_Vec4_default_instance_);
}
inline const ::EditorGRPC::Vec4& SerializablePropertyData::v4() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.v4)
  return _internal_v4();
}
inline ::EditorGRPC::Vec4* SerializablePropertyData::unsafe_arena_release_v4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:EditorGRPC.SerializablePropertyData.v4)
  if (_internal_has_v4()) {
    clear_has_data();
    ::EditorGRPC::Vec4* temp = data_.v4_;
    data_.v4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializablePropertyData::unsafe_arena_set_allocated_v4(::EditorGRPC::Vec4* v4) {
  clear_data();
  if (v4) {
    set_has_v4();
    data_.v4_ = v4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.SerializablePropertyData.v4)
}
inline ::EditorGRPC::Vec4* SerializablePropertyData::_internal_mutable_v4() {
  if (!_internal_has_v4()) {
    clear_data();
    set_has_v4();
    data_.v4_ = CreateMaybeMessage< ::EditorGRPC::Vec4 >(GetArenaForAllocation());
  }
  return data_.v4_;
}
inline ::EditorGRPC::Vec4* SerializablePropertyData::mutable_v4() {
  ::EditorGRPC::Vec4* _msg = _internal_mutable_v4();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertyData.v4)
  return _msg;
}

// .EditorGRPC.ChildNodes children = 14;
inline bool SerializablePropertyData::_internal_has_children() const {
  return data_case() == kChildren;
}
inline bool SerializablePropertyData::has_children() const {
  return _internal_has_children();
}
inline void SerializablePropertyData::set_has_children() {
  _oneof_case_[0] = kChildren;
}
inline void SerializablePropertyData::clear_children() {
  if (_internal_has_children()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.children_;
    }
    clear_has_data();
  }
}
inline ::EditorGRPC::ChildNodes* SerializablePropertyData::release_children() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializablePropertyData.children)
  if (_internal_has_children()) {
    clear_has_data();
      ::EditorGRPC::ChildNodes* temp = data_.children_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.children_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EditorGRPC::ChildNodes& SerializablePropertyData::_internal_children() const {
  return _internal_has_children()
      ? *data_.children_
      : reinterpret_cast< ::EditorGRPC::ChildNodes&>(::EditorGRPC::_ChildNodes_default_instance_);
}
inline const ::EditorGRPC::ChildNodes& SerializablePropertyData::children() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertyData.children)
  return _internal_children();
}
inline ::EditorGRPC::ChildNodes* SerializablePropertyData::unsafe_arena_release_children() {
  // @@protoc_insertion_point(field_unsafe_arena_release:EditorGRPC.SerializablePropertyData.children)
  if (_internal_has_children()) {
    clear_has_data();
    ::EditorGRPC::ChildNodes* temp = data_.children_;
    data_.children_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializablePropertyData::unsafe_arena_set_allocated_children(::EditorGRPC::ChildNodes* children) {
  clear_data();
  if (children) {
    set_has_children();
    data_.children_ = children;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.SerializablePropertyData.children)
}
inline ::EditorGRPC::ChildNodes* SerializablePropertyData::_internal_mutable_children() {
  if (!_internal_has_children()) {
    clear_data();
    set_has_children();
    data_.children_ = CreateMaybeMessage< ::EditorGRPC::ChildNodes >(GetArenaForAllocation());
  }
  return data_.children_;
}
inline ::EditorGRPC::ChildNodes* SerializablePropertyData::mutable_children() {
  ::EditorGRPC::ChildNodes* _msg = _internal_mutable_children();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertyData.children)
  return _msg;
}

inline bool SerializablePropertyData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SerializablePropertyData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SerializablePropertyData::DataCase SerializablePropertyData::data_case() const {
  return SerializablePropertyData::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SerializableProperty

// string name = 1;
inline void SerializableProperty::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SerializableProperty::name() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializableProperty.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializableProperty::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializableProperty.name)
}
inline std::string* SerializableProperty::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializableProperty.name)
  return _s;
}
inline const std::string& SerializableProperty::_internal_name() const {
  return name_.Get();
}
inline void SerializableProperty::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializableProperty::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializableProperty::release_name() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializableProperty.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerializableProperty::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.SerializableProperty.name)
}

// .EditorGRPC.SerializableProperty.Type type = 2;
inline void SerializableProperty::clear_type() {
  type_ = 0;
}
inline ::EditorGRPC::SerializableProperty_Type SerializableProperty::_internal_type() const {
  return static_cast< ::EditorGRPC::SerializableProperty_Type >(type_);
}
inline ::EditorGRPC::SerializableProperty_Type SerializableProperty::type() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializableProperty.type)
  return _internal_type();
}
inline void SerializableProperty::_internal_set_type(::EditorGRPC::SerializableProperty_Type value) {
  
  type_ = value;
}
inline void SerializableProperty::set_type(::EditorGRPC::SerializableProperty_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializableProperty.type)
}

// .EditorGRPC.SerializablePropertyData data = 3;
inline bool SerializableProperty::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SerializableProperty::has_data() const {
  return _internal_has_data();
}
inline void SerializableProperty::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::EditorGRPC::SerializablePropertyData& SerializableProperty::_internal_data() const {
  const ::EditorGRPC::SerializablePropertyData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::EditorGRPC::SerializablePropertyData&>(
      ::EditorGRPC::_SerializablePropertyData_default_instance_);
}
inline const ::EditorGRPC::SerializablePropertyData& SerializableProperty::data() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializableProperty.data)
  return _internal_data();
}
inline void SerializableProperty::unsafe_arena_set_allocated_data(
    ::EditorGRPC::SerializablePropertyData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.SerializableProperty.data)
}
inline ::EditorGRPC::SerializablePropertyData* SerializableProperty::release_data() {
  
  ::EditorGRPC::SerializablePropertyData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EditorGRPC::SerializablePropertyData* SerializableProperty::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializableProperty.data)
  
  ::EditorGRPC::SerializablePropertyData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::EditorGRPC::SerializablePropertyData* SerializableProperty::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::EditorGRPC::SerializablePropertyData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::EditorGRPC::SerializablePropertyData* SerializableProperty::mutable_data() {
  ::EditorGRPC::SerializablePropertyData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializableProperty.data)
  return _msg;
}
inline void SerializableProperty::set_allocated_data(::EditorGRPC::SerializablePropertyData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EditorGRPC::SerializablePropertyData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.SerializableProperty.data)
}

// -------------------------------------------------------------------

// SetSerializablePropertyData

// .EditorGRPC.SerializableProperty newVal = 1;
inline bool SetSerializablePropertyData::_internal_has_newval() const {
  return this != internal_default_instance() && newval_ != nullptr;
}
inline bool SetSerializablePropertyData::has_newval() const {
  return _internal_has_newval();
}
inline void SetSerializablePropertyData::clear_newval() {
  if (GetArenaForAllocation() == nullptr && newval_ != nullptr) {
    delete newval_;
  }
  newval_ = nullptr;
}
inline const ::EditorGRPC::SerializableProperty& SetSerializablePropertyData::_internal_newval() const {
  const ::EditorGRPC::SerializableProperty* p = newval_;
  return p != nullptr ? *p : reinterpret_cast<const ::EditorGRPC::SerializableProperty&>(
      ::EditorGRPC::_SerializableProperty_default_instance_);
}
inline const ::EditorGRPC::SerializableProperty& SetSerializablePropertyData::newval() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SetSerializablePropertyData.newVal)
  return _internal_newval();
}
inline void SetSerializablePropertyData::unsafe_arena_set_allocated_newval(
    ::EditorGRPC::SerializableProperty* newval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newval_);
  }
  newval_ = newval;
  if (newval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.SetSerializablePropertyData.newVal)
}
inline ::EditorGRPC::SerializableProperty* SetSerializablePropertyData::release_newval() {
  
  ::EditorGRPC::SerializableProperty* temp = newval_;
  newval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EditorGRPC::SerializableProperty* SetSerializablePropertyData::unsafe_arena_release_newval() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SetSerializablePropertyData.newVal)
  
  ::EditorGRPC::SerializableProperty* temp = newval_;
  newval_ = nullptr;
  return temp;
}
inline ::EditorGRPC::SerializableProperty* SetSerializablePropertyData::_internal_mutable_newval() {
  
  if (newval_ == nullptr) {
    auto* p = CreateMaybeMessage<::EditorGRPC::SerializableProperty>(GetArenaForAllocation());
    newval_ = p;
  }
  return newval_;
}
inline ::EditorGRPC::SerializableProperty* SetSerializablePropertyData::mutable_newval() {
  ::EditorGRPC::SerializableProperty* _msg = _internal_mutable_newval();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SetSerializablePropertyData.newVal)
  return _msg;
}
inline void SetSerializablePropertyData::set_allocated_newval(::EditorGRPC::SerializableProperty* newval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete newval_;
  }
  if (newval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EditorGRPC::SerializableProperty>::GetOwningArena(newval);
    if (message_arena != submessage_arena) {
      newval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newval, submessage_arena);
    }
    
  } else {
    
  }
  newval_ = newval;
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.SetSerializablePropertyData.newVal)
}

// string path = 2;
inline void SetSerializablePropertyData::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SetSerializablePropertyData::path() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SetSerializablePropertyData.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetSerializablePropertyData::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.SetSerializablePropertyData.path)
}
inline std::string* SetSerializablePropertyData::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SetSerializablePropertyData.path)
  return _s;
}
inline const std::string& SetSerializablePropertyData::_internal_path() const {
  return path_.Get();
}
inline void SetSerializablePropertyData::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetSerializablePropertyData::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetSerializablePropertyData::release_path() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SetSerializablePropertyData.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetSerializablePropertyData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.SetSerializablePropertyData.path)
}

// -------------------------------------------------------------------

// SetSerializablePropertyResult

// .EditorGRPC.SetSerializablePropertyResult.Result result = 1;
inline void SetSerializablePropertyResult::clear_result() {
  result_ = 0;
}
inline ::EditorGRPC::SetSerializablePropertyResult_Result SetSerializablePropertyResult::_internal_result() const {
  return static_cast< ::EditorGRPC::SetSerializablePropertyResult_Result >(result_);
}
inline ::EditorGRPC::SetSerializablePropertyResult_Result SetSerializablePropertyResult::result() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SetSerializablePropertyResult.result)
  return _internal_result();
}
inline void SetSerializablePropertyResult::_internal_set_result(::EditorGRPC::SetSerializablePropertyResult_Result value) {
  
  result_ = value;
}
inline void SetSerializablePropertyResult::set_result(::EditorGRPC::SetSerializablePropertyResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.SetSerializablePropertyResult.result)
}

// -------------------------------------------------------------------

// SerializablePropertiesNode

// string name = 1;
inline void SerializablePropertiesNode::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SerializablePropertiesNode::name() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertiesNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializablePropertiesNode::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.SerializablePropertiesNode.name)
}
inline std::string* SerializablePropertiesNode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertiesNode.name)
  return _s;
}
inline const std::string& SerializablePropertiesNode::_internal_name() const {
  return name_.Get();
}
inline void SerializablePropertiesNode::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializablePropertiesNode::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializablePropertiesNode::release_name() {
  // @@protoc_insertion_point(field_release:EditorGRPC.SerializablePropertiesNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerializablePropertiesNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.SerializablePropertiesNode.name)
}

// repeated .EditorGRPC.SerializableProperty props = 2;
inline int SerializablePropertiesNode::_internal_props_size() const {
  return props_.size();
}
inline int SerializablePropertiesNode::props_size() const {
  return _internal_props_size();
}
inline void SerializablePropertiesNode::clear_props() {
  props_.Clear();
}
inline ::EditorGRPC::SerializableProperty* SerializablePropertiesNode::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertiesNode.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializableProperty >*
SerializablePropertiesNode::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.SerializablePropertiesNode.props)
  return &props_;
}
inline const ::EditorGRPC::SerializableProperty& SerializablePropertiesNode::_internal_props(int index) const {
  return props_.Get(index);
}
inline const ::EditorGRPC::SerializableProperty& SerializablePropertiesNode::props(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertiesNode.props)
  return _internal_props(index);
}
inline ::EditorGRPC::SerializableProperty* SerializablePropertiesNode::_internal_add_props() {
  return props_.Add();
}
inline ::EditorGRPC::SerializableProperty* SerializablePropertiesNode::add_props() {
  ::EditorGRPC::SerializableProperty* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:EditorGRPC.SerializablePropertiesNode.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializableProperty >&
SerializablePropertiesNode::props() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.SerializablePropertiesNode.props)
  return props_;
}

// -------------------------------------------------------------------

// SerializablePropertiesNodes

// repeated .EditorGRPC.SerializablePropertiesNode nodes = 1;
inline int SerializablePropertiesNodes::_internal_nodes_size() const {
  return nodes_.size();
}
inline int SerializablePropertiesNodes::nodes_size() const {
  return _internal_nodes_size();
}
inline void SerializablePropertiesNodes::clear_nodes() {
  nodes_.Clear();
}
inline ::EditorGRPC::SerializablePropertiesNode* SerializablePropertiesNodes::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.SerializablePropertiesNodes.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >*
SerializablePropertiesNodes::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.SerializablePropertiesNodes.nodes)
  return &nodes_;
}
inline const ::EditorGRPC::SerializablePropertiesNode& SerializablePropertiesNodes::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::EditorGRPC::SerializablePropertiesNode& SerializablePropertiesNodes::nodes(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.SerializablePropertiesNodes.nodes)
  return _internal_nodes(index);
}
inline ::EditorGRPC::SerializablePropertiesNode* SerializablePropertiesNodes::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::EditorGRPC::SerializablePropertiesNode* SerializablePropertiesNodes::add_nodes() {
  ::EditorGRPC::SerializablePropertiesNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:EditorGRPC.SerializablePropertiesNodes.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::SerializablePropertiesNode >&
SerializablePropertiesNodes::nodes() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.SerializablePropertiesNodes.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// FileSavePath

// string path = 1;
inline void FileSavePath::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& FileSavePath::path() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.FileSavePath.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileSavePath::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.FileSavePath.path)
}
inline std::string* FileSavePath::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.FileSavePath.path)
  return _s;
}
inline const std::string& FileSavePath::_internal_path() const {
  return path_.Get();
}
inline void FileSavePath::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileSavePath::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileSavePath::release_path() {
  // @@protoc_insertion_point(field_release:EditorGRPC.FileSavePath.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileSavePath::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.FileSavePath.path)
}

// -------------------------------------------------------------------

// FileSaveResult

// .EditorGRPC.FileSaveResult.Result result = 1;
inline void FileSaveResult::clear_result() {
  result_ = 0;
}
inline ::EditorGRPC::FileSaveResult_Result FileSaveResult::_internal_result() const {
  return static_cast< ::EditorGRPC::FileSaveResult_Result >(result_);
}
inline ::EditorGRPC::FileSaveResult_Result FileSaveResult::result() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.FileSaveResult.result)
  return _internal_result();
}
inline void FileSaveResult::_internal_set_result(::EditorGRPC::FileSaveResult_Result value) {
  
  result_ = value;
}
inline void FileSaveResult::set_result(::EditorGRPC::FileSaveResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.FileSaveResult.result)
}

// -------------------------------------------------------------------

// FrameworkLayer

// bool masksLayerBelow = 1;
inline void FrameworkLayer::clear_maskslayerbelow() {
  maskslayerbelow_ = false;
}
inline bool FrameworkLayer::_internal_maskslayerbelow() const {
  return maskslayerbelow_;
}
inline bool FrameworkLayer::maskslayerbelow() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.FrameworkLayer.masksLayerBelow)
  return _internal_maskslayerbelow();
}
inline void FrameworkLayer::_internal_set_maskslayerbelow(bool value) {
  
  maskslayerbelow_ = value;
}
inline void FrameworkLayer::set_maskslayerbelow(bool value) {
  _internal_set_maskslayerbelow(value);
  // @@protoc_insertion_point(field_set:EditorGRPC.FrameworkLayer.masksLayerBelow)
}

// string name = 2;
inline void FrameworkLayer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FrameworkLayer::name() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.FrameworkLayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameworkLayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditorGRPC.FrameworkLayer.name)
}
inline std::string* FrameworkLayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.FrameworkLayer.name)
  return _s;
}
inline const std::string& FrameworkLayer::_internal_name() const {
  return name_.Get();
}
inline void FrameworkLayer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FrameworkLayer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FrameworkLayer::release_name() {
  // @@protoc_insertion_point(field_release:EditorGRPC.FrameworkLayer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FrameworkLayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.FrameworkLayer.name)
}

// -------------------------------------------------------------------

// UpdatableLayersStack

// repeated .EditorGRPC.FrameworkLayer layers = 1;
inline int UpdatableLayersStack::_internal_layers_size() const {
  return layers_.size();
}
inline int UpdatableLayersStack::layers_size() const {
  return _internal_layers_size();
}
inline void UpdatableLayersStack::clear_layers() {
  layers_.Clear();
}
inline ::EditorGRPC::FrameworkLayer* UpdatableLayersStack::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.UpdatableLayersStack.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >*
UpdatableLayersStack::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.UpdatableLayersStack.layers)
  return &layers_;
}
inline const ::EditorGRPC::FrameworkLayer& UpdatableLayersStack::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::EditorGRPC::FrameworkLayer& UpdatableLayersStack::layers(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.UpdatableLayersStack.layers)
  return _internal_layers(index);
}
inline ::EditorGRPC::FrameworkLayer* UpdatableLayersStack::_internal_add_layers() {
  return layers_.Add();
}
inline ::EditorGRPC::FrameworkLayer* UpdatableLayersStack::add_layers() {
  ::EditorGRPC::FrameworkLayer* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:EditorGRPC.UpdatableLayersStack.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >&
UpdatableLayersStack::layers() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.UpdatableLayersStack.layers)
  return layers_;
}

// -------------------------------------------------------------------

// DrawableLayersStack

// repeated .EditorGRPC.FrameworkLayer layers = 1;
inline int DrawableLayersStack::_internal_layers_size() const {
  return layers_.size();
}
inline int DrawableLayersStack::layers_size() const {
  return _internal_layers_size();
}
inline void DrawableLayersStack::clear_layers() {
  layers_.Clear();
}
inline ::EditorGRPC::FrameworkLayer* DrawableLayersStack::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.DrawableLayersStack.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >*
DrawableLayersStack::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.DrawableLayersStack.layers)
  return &layers_;
}
inline const ::EditorGRPC::FrameworkLayer& DrawableLayersStack::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::EditorGRPC::FrameworkLayer& DrawableLayersStack::layers(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.DrawableLayersStack.layers)
  return _internal_layers(index);
}
inline ::EditorGRPC::FrameworkLayer* DrawableLayersStack::_internal_add_layers() {
  return layers_.Add();
}
inline ::EditorGRPC::FrameworkLayer* DrawableLayersStack::add_layers() {
  ::EditorGRPC::FrameworkLayer* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:EditorGRPC.DrawableLayersStack.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >&
DrawableLayersStack::layers() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.DrawableLayersStack.layers)
  return layers_;
}

// -------------------------------------------------------------------

// InputLayersStack

// repeated .EditorGRPC.FrameworkLayer layers = 1;
inline int InputLayersStack::_internal_layers_size() const {
  return layers_.size();
}
inline int InputLayersStack::layers_size() const {
  return _internal_layers_size();
}
inline void InputLayersStack::clear_layers() {
  layers_.Clear();
}
inline ::EditorGRPC::FrameworkLayer* InputLayersStack::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:EditorGRPC.InputLayersStack.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >*
InputLayersStack::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:EditorGRPC.InputLayersStack.layers)
  return &layers_;
}
inline const ::EditorGRPC::FrameworkLayer& InputLayersStack::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::EditorGRPC::FrameworkLayer& InputLayersStack::layers(int index) const {
  // @@protoc_insertion_point(field_get:EditorGRPC.InputLayersStack.layers)
  return _internal_layers(index);
}
inline ::EditorGRPC::FrameworkLayer* InputLayersStack::_internal_add_layers() {
  return layers_.Add();
}
inline ::EditorGRPC::FrameworkLayer* InputLayersStack::add_layers() {
  ::EditorGRPC::FrameworkLayer* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:EditorGRPC.InputLayersStack.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EditorGRPC::FrameworkLayer >&
InputLayersStack::layers() const {
  // @@protoc_insertion_point(field_list:EditorGRPC.InputLayersStack.layers)
  return layers_;
}

// -------------------------------------------------------------------

// GameFrameworkLayers

// .EditorGRPC.UpdatableLayersStack updatable = 1;
inline bool GameFrameworkLayers::_internal_has_updatable() const {
  return this != internal_default_instance() && updatable_ != nullptr;
}
inline bool GameFrameworkLayers::has_updatable() const {
  return _internal_has_updatable();
}
inline void GameFrameworkLayers::clear_updatable() {
  if (GetArenaForAllocation() == nullptr && updatable_ != nullptr) {
    delete updatable_;
  }
  updatable_ = nullptr;
}
inline const ::EditorGRPC::UpdatableLayersStack& GameFrameworkLayers::_internal_updatable() const {
  const ::EditorGRPC::UpdatableLayersStack* p = updatable_;
  return p != nullptr ? *p : reinterpret_cast<const ::EditorGRPC::UpdatableLayersStack&>(
      ::EditorGRPC::_UpdatableLayersStack_default_instance_);
}
inline const ::EditorGRPC::UpdatableLayersStack& GameFrameworkLayers::updatable() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.GameFrameworkLayers.updatable)
  return _internal_updatable();
}
inline void GameFrameworkLayers::unsafe_arena_set_allocated_updatable(
    ::EditorGRPC::UpdatableLayersStack* updatable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_);
  }
  updatable_ = updatable;
  if (updatable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.GameFrameworkLayers.updatable)
}
inline ::EditorGRPC::UpdatableLayersStack* GameFrameworkLayers::release_updatable() {
  
  ::EditorGRPC::UpdatableLayersStack* temp = updatable_;
  updatable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EditorGRPC::UpdatableLayersStack* GameFrameworkLayers::unsafe_arena_release_updatable() {
  // @@protoc_insertion_point(field_release:EditorGRPC.GameFrameworkLayers.updatable)
  
  ::EditorGRPC::UpdatableLayersStack* temp = updatable_;
  updatable_ = nullptr;
  return temp;
}
inline ::EditorGRPC::UpdatableLayersStack* GameFrameworkLayers::_internal_mutable_updatable() {
  
  if (updatable_ == nullptr) {
    auto* p = CreateMaybeMessage<::EditorGRPC::UpdatableLayersStack>(GetArenaForAllocation());
    updatable_ = p;
  }
  return updatable_;
}
inline ::EditorGRPC::UpdatableLayersStack* GameFrameworkLayers::mutable_updatable() {
  ::EditorGRPC::UpdatableLayersStack* _msg = _internal_mutable_updatable();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.GameFrameworkLayers.updatable)
  return _msg;
}
inline void GameFrameworkLayers::set_allocated_updatable(::EditorGRPC::UpdatableLayersStack* updatable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete updatable_;
  }
  if (updatable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EditorGRPC::UpdatableLayersStack>::GetOwningArena(updatable);
    if (message_arena != submessage_arena) {
      updatable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable, submessage_arena);
    }
    
  } else {
    
  }
  updatable_ = updatable;
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.GameFrameworkLayers.updatable)
}

// .EditorGRPC.DrawableLayersStack drawable = 2;
inline bool GameFrameworkLayers::_internal_has_drawable() const {
  return this != internal_default_instance() && drawable_ != nullptr;
}
inline bool GameFrameworkLayers::has_drawable() const {
  return _internal_has_drawable();
}
inline void GameFrameworkLayers::clear_drawable() {
  if (GetArenaForAllocation() == nullptr && drawable_ != nullptr) {
    delete drawable_;
  }
  drawable_ = nullptr;
}
inline const ::EditorGRPC::DrawableLayersStack& GameFrameworkLayers::_internal_drawable() const {
  const ::EditorGRPC::DrawableLayersStack* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::EditorGRPC::DrawableLayersStack&>(
      ::EditorGRPC::_DrawableLayersStack_default_instance_);
}
inline const ::EditorGRPC::DrawableLayersStack& GameFrameworkLayers::drawable() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.GameFrameworkLayers.drawable)
  return _internal_drawable();
}
inline void GameFrameworkLayers::unsafe_arena_set_allocated_drawable(
    ::EditorGRPC::DrawableLayersStack* drawable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.GameFrameworkLayers.drawable)
}
inline ::EditorGRPC::DrawableLayersStack* GameFrameworkLayers::release_drawable() {
  
  ::EditorGRPC::DrawableLayersStack* temp = drawable_;
  drawable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EditorGRPC::DrawableLayersStack* GameFrameworkLayers::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:EditorGRPC.GameFrameworkLayers.drawable)
  
  ::EditorGRPC::DrawableLayersStack* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::EditorGRPC::DrawableLayersStack* GameFrameworkLayers::_internal_mutable_drawable() {
  
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::EditorGRPC::DrawableLayersStack>(GetArenaForAllocation());
    drawable_ = p;
  }
  return drawable_;
}
inline ::EditorGRPC::DrawableLayersStack* GameFrameworkLayers::mutable_drawable() {
  ::EditorGRPC::DrawableLayersStack* _msg = _internal_mutable_drawable();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.GameFrameworkLayers.drawable)
  return _msg;
}
inline void GameFrameworkLayers::set_allocated_drawable(::EditorGRPC::DrawableLayersStack* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete drawable_;
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EditorGRPC::DrawableLayersStack>::GetOwningArena(drawable);
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    
  } else {
    
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.GameFrameworkLayers.drawable)
}

// .EditorGRPC.InputLayersStack input = 3;
inline bool GameFrameworkLayers::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool GameFrameworkLayers::has_input() const {
  return _internal_has_input();
}
inline void GameFrameworkLayers::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::EditorGRPC::InputLayersStack& GameFrameworkLayers::_internal_input() const {
  const ::EditorGRPC::InputLayersStack* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::EditorGRPC::InputLayersStack&>(
      ::EditorGRPC::_InputLayersStack_default_instance_);
}
inline const ::EditorGRPC::InputLayersStack& GameFrameworkLayers::input() const {
  // @@protoc_insertion_point(field_get:EditorGRPC.GameFrameworkLayers.input)
  return _internal_input();
}
inline void GameFrameworkLayers::unsafe_arena_set_allocated_input(
    ::EditorGRPC::InputLayersStack* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EditorGRPC.GameFrameworkLayers.input)
}
inline ::EditorGRPC::InputLayersStack* GameFrameworkLayers::release_input() {
  
  ::EditorGRPC::InputLayersStack* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EditorGRPC::InputLayersStack* GameFrameworkLayers::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:EditorGRPC.GameFrameworkLayers.input)
  
  ::EditorGRPC::InputLayersStack* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::EditorGRPC::InputLayersStack* GameFrameworkLayers::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::EditorGRPC::InputLayersStack>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::EditorGRPC::InputLayersStack* GameFrameworkLayers::mutable_input() {
  ::EditorGRPC::InputLayersStack* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:EditorGRPC.GameFrameworkLayers.input)
  return _msg;
}
inline void GameFrameworkLayers::set_allocated_input(::EditorGRPC::InputLayersStack* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EditorGRPC::InputLayersStack>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:EditorGRPC.GameFrameworkLayers.input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EditorGRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EditorGRPC::EditBlockResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EditorGRPC::EditBlockResult_Result>() {
  return ::EditorGRPC::EditBlockResult_Result_descriptor();
}
template <> struct is_proto_enum< ::EditorGRPC::SetBoardDescriptionResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EditorGRPC::SetBoardDescriptionResult_Result>() {
  return ::EditorGRPC::SetBoardDescriptionResult_Result_descriptor();
}
template <> struct is_proto_enum< ::EditorGRPC::SerializableProperty_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EditorGRPC::SerializableProperty_Type>() {
  return ::EditorGRPC::SerializableProperty_Type_descriptor();
}
template <> struct is_proto_enum< ::EditorGRPC::SetSerializablePropertyResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EditorGRPC::SetSerializablePropertyResult_Result>() {
  return ::EditorGRPC::SetSerializablePropertyResult_Result_descriptor();
}
template <> struct is_proto_enum< ::EditorGRPC::FileSaveResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EditorGRPC::FileSaveResult_Result>() {
  return ::EditorGRPC::FileSaveResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto
