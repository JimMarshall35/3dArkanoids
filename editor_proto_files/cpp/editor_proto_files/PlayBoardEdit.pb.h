// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_proto_files/PlayBoardEdit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
namespace Arkanoids3d {
class BoardDescription;
struct BoardDescriptionDefaultTypeInternal;
extern BoardDescriptionDefaultTypeInternal _BoardDescription_default_instance_;
class EditBlockResult;
struct EditBlockResultDefaultTypeInternal;
extern EditBlockResultDefaultTypeInternal _EditBlockResult_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class SetBoardDescriptionResult;
struct SetBoardDescriptionResultDefaultTypeInternal;
extern SetBoardDescriptionResultDefaultTypeInternal _SetBoardDescriptionResult_default_instance_;
class void_;
struct void_DefaultTypeInternal;
extern void_DefaultTypeInternal _void__default_instance_;
}  // namespace Arkanoids3d
PROTOBUF_NAMESPACE_OPEN
template<> ::Arkanoids3d::BoardDescription* Arena::CreateMaybeMessage<::Arkanoids3d::BoardDescription>(Arena*);
template<> ::Arkanoids3d::EditBlockResult* Arena::CreateMaybeMessage<::Arkanoids3d::EditBlockResult>(Arena*);
template<> ::Arkanoids3d::Point* Arena::CreateMaybeMessage<::Arkanoids3d::Point>(Arena*);
template<> ::Arkanoids3d::SetBoardDescriptionResult* Arena::CreateMaybeMessage<::Arkanoids3d::SetBoardDescriptionResult>(Arena*);
template<> ::Arkanoids3d::void_* Arena::CreateMaybeMessage<::Arkanoids3d::void_>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Arkanoids3d {

enum EditBlockResult_Result : int {
  EditBlockResult_Result_SPACE_EMPTY = 0,
  EditBlockResult_Result_BLOCK_AT_SPACE = 1,
  EditBlockResult_Result_FAILURE_POINT_OUT_OF_BOUNDS = 2,
  EditBlockResult_Result_OTHER_FAILURE = 3,
  EditBlockResult_Result_EditBlockResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EditBlockResult_Result_EditBlockResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EditBlockResult_Result_IsValid(int value);
constexpr EditBlockResult_Result EditBlockResult_Result_Result_MIN = EditBlockResult_Result_SPACE_EMPTY;
constexpr EditBlockResult_Result EditBlockResult_Result_Result_MAX = EditBlockResult_Result_OTHER_FAILURE;
constexpr int EditBlockResult_Result_Result_ARRAYSIZE = EditBlockResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditBlockResult_Result_descriptor();
template<typename T>
inline const std::string& EditBlockResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EditBlockResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EditBlockResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EditBlockResult_Result_descriptor(), enum_t_value);
}
inline bool EditBlockResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EditBlockResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EditBlockResult_Result>(
    EditBlockResult_Result_descriptor(), name, value);
}
enum SetBoardDescriptionResult_Result : int {
  SetBoardDescriptionResult_Result_SUCCESS = 0,
  SetBoardDescriptionResult_Result_FAILURE_TOO_MANY_BYTES_FOR_WHD = 1,
  SetBoardDescriptionResult_Result_FAILURE_TOO_FEW_BYTES_FOR_WHD = 2,
  SetBoardDescriptionResult_Result_SetBoardDescriptionResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetBoardDescriptionResult_Result_SetBoardDescriptionResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetBoardDescriptionResult_Result_IsValid(int value);
constexpr SetBoardDescriptionResult_Result SetBoardDescriptionResult_Result_Result_MIN = SetBoardDescriptionResult_Result_SUCCESS;
constexpr SetBoardDescriptionResult_Result SetBoardDescriptionResult_Result_Result_MAX = SetBoardDescriptionResult_Result_FAILURE_TOO_FEW_BYTES_FOR_WHD;
constexpr int SetBoardDescriptionResult_Result_Result_ARRAYSIZE = SetBoardDescriptionResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetBoardDescriptionResult_Result_descriptor();
template<typename T>
inline const std::string& SetBoardDescriptionResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetBoardDescriptionResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetBoardDescriptionResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetBoardDescriptionResult_Result_descriptor(), enum_t_value);
}
inline bool SetBoardDescriptionResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetBoardDescriptionResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetBoardDescriptionResult_Result>(
    SetBoardDescriptionResult_Result_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arkanoids3d.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arkanoids3d.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Arkanoids3d.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  int32_t z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class EditBlockResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arkanoids3d.EditBlockResult) */ {
 public:
  inline EditBlockResult() : EditBlockResult(nullptr) {}
  ~EditBlockResult() override;
  explicit PROTOBUF_CONSTEXPR EditBlockResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditBlockResult(const EditBlockResult& from);
  EditBlockResult(EditBlockResult&& from) noexcept
    : EditBlockResult() {
    *this = ::std::move(from);
  }

  inline EditBlockResult& operator=(const EditBlockResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditBlockResult& operator=(EditBlockResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditBlockResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditBlockResult* internal_default_instance() {
    return reinterpret_cast<const EditBlockResult*>(
               &_EditBlockResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EditBlockResult& a, EditBlockResult& b) {
    a.Swap(&b);
  }
  inline void Swap(EditBlockResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditBlockResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditBlockResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditBlockResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditBlockResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EditBlockResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditBlockResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arkanoids3d.EditBlockResult";
  }
  protected:
  explicit EditBlockResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EditBlockResult_Result Result;
  static constexpr Result SPACE_EMPTY =
    EditBlockResult_Result_SPACE_EMPTY;
  static constexpr Result BLOCK_AT_SPACE =
    EditBlockResult_Result_BLOCK_AT_SPACE;
  static constexpr Result FAILURE_POINT_OUT_OF_BOUNDS =
    EditBlockResult_Result_FAILURE_POINT_OUT_OF_BOUNDS;
  static constexpr Result OTHER_FAILURE =
    EditBlockResult_Result_OTHER_FAILURE;
  static inline bool Result_IsValid(int value) {
    return EditBlockResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    EditBlockResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    EditBlockResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    EditBlockResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return EditBlockResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return EditBlockResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return EditBlockResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kResultFieldNumber = 1,
    kBlockCodeFieldNumber = 2,
  };
  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // .Arkanoids3d.EditBlockResult.Result result = 1;
  void clear_result();
  ::Arkanoids3d::EditBlockResult_Result result() const;
  void set_result(::Arkanoids3d::EditBlockResult_Result value);
  private:
  ::Arkanoids3d::EditBlockResult_Result _internal_result() const;
  void _internal_set_result(::Arkanoids3d::EditBlockResult_Result value);
  public:

  // int32 blockCode = 2;
  void clear_blockcode();
  int32_t blockcode() const;
  void set_blockcode(int32_t value);
  private:
  int32_t _internal_blockcode() const;
  void _internal_set_blockcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Arkanoids3d.EditBlockResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  int result_;
  int32_t blockcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class SetBoardDescriptionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arkanoids3d.SetBoardDescriptionResult) */ {
 public:
  inline SetBoardDescriptionResult() : SetBoardDescriptionResult(nullptr) {}
  ~SetBoardDescriptionResult() override;
  explicit PROTOBUF_CONSTEXPR SetBoardDescriptionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBoardDescriptionResult(const SetBoardDescriptionResult& from);
  SetBoardDescriptionResult(SetBoardDescriptionResult&& from) noexcept
    : SetBoardDescriptionResult() {
    *this = ::std::move(from);
  }

  inline SetBoardDescriptionResult& operator=(const SetBoardDescriptionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBoardDescriptionResult& operator=(SetBoardDescriptionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBoardDescriptionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBoardDescriptionResult* internal_default_instance() {
    return reinterpret_cast<const SetBoardDescriptionResult*>(
               &_SetBoardDescriptionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetBoardDescriptionResult& a, SetBoardDescriptionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBoardDescriptionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBoardDescriptionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBoardDescriptionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBoardDescriptionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBoardDescriptionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBoardDescriptionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBoardDescriptionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arkanoids3d.SetBoardDescriptionResult";
  }
  protected:
  explicit SetBoardDescriptionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetBoardDescriptionResult_Result Result;
  static constexpr Result SUCCESS =
    SetBoardDescriptionResult_Result_SUCCESS;
  static constexpr Result FAILURE_TOO_MANY_BYTES_FOR_WHD =
    SetBoardDescriptionResult_Result_FAILURE_TOO_MANY_BYTES_FOR_WHD;
  static constexpr Result FAILURE_TOO_FEW_BYTES_FOR_WHD =
    SetBoardDescriptionResult_Result_FAILURE_TOO_FEW_BYTES_FOR_WHD;
  static inline bool Result_IsValid(int value) {
    return SetBoardDescriptionResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    SetBoardDescriptionResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    SetBoardDescriptionResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    SetBoardDescriptionResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return SetBoardDescriptionResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return SetBoardDescriptionResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return SetBoardDescriptionResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .Arkanoids3d.SetBoardDescriptionResult.Result result = 1;
  void clear_result();
  ::Arkanoids3d::SetBoardDescriptionResult_Result result() const;
  void set_result(::Arkanoids3d::SetBoardDescriptionResult_Result value);
  private:
  ::Arkanoids3d::SetBoardDescriptionResult_Result _internal_result() const;
  void _internal_set_result(::Arkanoids3d::SetBoardDescriptionResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:Arkanoids3d.SetBoardDescriptionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class void_ final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Arkanoids3d.void) */ {
 public:
  inline void_() : void_(nullptr) {}
  explicit PROTOBUF_CONSTEXPR void_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  void_(const void_& from);
  void_(void_&& from) noexcept
    : void_() {
    *this = ::std::move(from);
  }

  inline void_& operator=(const void_& from) {
    CopyFrom(from);
    return *this;
  }
  inline void_& operator=(void_&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const void_& default_instance() {
    return *internal_default_instance();
  }
  static inline const void_* internal_default_instance() {
    return reinterpret_cast<const void_*>(
               &_void__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(void_& a, void_& b) {
    a.Swap(&b);
  }
  inline void Swap(void_* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(void_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  void_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<void_>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const void_& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const void_& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arkanoids3d.void";
  }
  protected:
  explicit void_(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Arkanoids3d.void)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// -------------------------------------------------------------------

class BoardDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Arkanoids3d.BoardDescription) */ {
 public:
  inline BoardDescription() : BoardDescription(nullptr) {}
  ~BoardDescription() override;
  explicit PROTOBUF_CONSTEXPR BoardDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardDescription(const BoardDescription& from);
  BoardDescription(BoardDescription&& from) noexcept
    : BoardDescription() {
    *this = ::std::move(from);
  }

  inline BoardDescription& operator=(const BoardDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardDescription& operator=(BoardDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardDescription* internal_default_instance() {
    return reinterpret_cast<const BoardDescription*>(
               &_BoardDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BoardDescription& a, BoardDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Arkanoids3d.BoardDescription";
  }
  protected:
  explicit BoardDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 depth = 3;
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Arkanoids3d.BoardDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t width_;
  int32_t height_;
  int32_t depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline int32_t Point::_internal_x() const {
  return x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline int32_t Point::_internal_y() const {
  return y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.Point.y)
}

// int32 z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline int32_t Point::_internal_z() const {
  return z_;
}
inline int32_t Point::z() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(int32_t value) {
  
  z_ = value;
}
inline void Point::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.Point.z)
}

// -------------------------------------------------------------------

// EditBlockResult

// .Arkanoids3d.EditBlockResult.Result result = 1;
inline void EditBlockResult::clear_result() {
  result_ = 0;
}
inline ::Arkanoids3d::EditBlockResult_Result EditBlockResult::_internal_result() const {
  return static_cast< ::Arkanoids3d::EditBlockResult_Result >(result_);
}
inline ::Arkanoids3d::EditBlockResult_Result EditBlockResult::result() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.EditBlockResult.result)
  return _internal_result();
}
inline void EditBlockResult::_internal_set_result(::Arkanoids3d::EditBlockResult_Result value) {
  
  result_ = value;
}
inline void EditBlockResult::set_result(::Arkanoids3d::EditBlockResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.EditBlockResult.result)
}

// int32 blockCode = 2;
inline void EditBlockResult::clear_blockcode() {
  blockcode_ = 0;
}
inline int32_t EditBlockResult::_internal_blockcode() const {
  return blockcode_;
}
inline int32_t EditBlockResult::blockcode() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.EditBlockResult.blockCode)
  return _internal_blockcode();
}
inline void EditBlockResult::_internal_set_blockcode(int32_t value) {
  
  blockcode_ = value;
}
inline void EditBlockResult::set_blockcode(int32_t value) {
  _internal_set_blockcode(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.EditBlockResult.blockCode)
}

// string errorMessage = 3;
inline void EditBlockResult::clear_errormessage() {
  errormessage_.ClearToEmpty();
}
inline const std::string& EditBlockResult::errormessage() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.EditBlockResult.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EditBlockResult::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Arkanoids3d.EditBlockResult.errorMessage)
}
inline std::string* EditBlockResult::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:Arkanoids3d.EditBlockResult.errorMessage)
  return _s;
}
inline const std::string& EditBlockResult::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void EditBlockResult::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* EditBlockResult::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* EditBlockResult::release_errormessage() {
  // @@protoc_insertion_point(field_release:Arkanoids3d.EditBlockResult.errorMessage)
  return errormessage_.Release();
}
inline void EditBlockResult::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errormessage_.IsDefault()) {
    errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Arkanoids3d.EditBlockResult.errorMessage)
}

// -------------------------------------------------------------------

// SetBoardDescriptionResult

// .Arkanoids3d.SetBoardDescriptionResult.Result result = 1;
inline void SetBoardDescriptionResult::clear_result() {
  result_ = 0;
}
inline ::Arkanoids3d::SetBoardDescriptionResult_Result SetBoardDescriptionResult::_internal_result() const {
  return static_cast< ::Arkanoids3d::SetBoardDescriptionResult_Result >(result_);
}
inline ::Arkanoids3d::SetBoardDescriptionResult_Result SetBoardDescriptionResult::result() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.SetBoardDescriptionResult.result)
  return _internal_result();
}
inline void SetBoardDescriptionResult::_internal_set_result(::Arkanoids3d::SetBoardDescriptionResult_Result value) {
  
  result_ = value;
}
inline void SetBoardDescriptionResult::set_result(::Arkanoids3d::SetBoardDescriptionResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.SetBoardDescriptionResult.result)
}

// -------------------------------------------------------------------

// void_

// -------------------------------------------------------------------

// BoardDescription

// int32 width = 1;
inline void BoardDescription::clear_width() {
  width_ = 0;
}
inline int32_t BoardDescription::_internal_width() const {
  return width_;
}
inline int32_t BoardDescription::width() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.BoardDescription.width)
  return _internal_width();
}
inline void BoardDescription::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void BoardDescription::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.BoardDescription.width)
}

// int32 height = 2;
inline void BoardDescription::clear_height() {
  height_ = 0;
}
inline int32_t BoardDescription::_internal_height() const {
  return height_;
}
inline int32_t BoardDescription::height() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.BoardDescription.height)
  return _internal_height();
}
inline void BoardDescription::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void BoardDescription::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.BoardDescription.height)
}

// int32 depth = 3;
inline void BoardDescription::clear_depth() {
  depth_ = 0;
}
inline int32_t BoardDescription::_internal_depth() const {
  return depth_;
}
inline int32_t BoardDescription::depth() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.BoardDescription.depth)
  return _internal_depth();
}
inline void BoardDescription::_internal_set_depth(int32_t value) {
  
  depth_ = value;
}
inline void BoardDescription::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:Arkanoids3d.BoardDescription.depth)
}

// bytes data = 4;
inline void BoardDescription::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BoardDescription::data() const {
  // @@protoc_insertion_point(field_get:Arkanoids3d.BoardDescription.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoardDescription::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Arkanoids3d.BoardDescription.data)
}
inline std::string* BoardDescription::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Arkanoids3d.BoardDescription.data)
  return _s;
}
inline const std::string& BoardDescription::_internal_data() const {
  return data_.Get();
}
inline void BoardDescription::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* BoardDescription::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* BoardDescription::release_data() {
  // @@protoc_insertion_point(field_release:Arkanoids3d.BoardDescription.data)
  return data_.Release();
}
inline void BoardDescription::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Arkanoids3d.BoardDescription.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Arkanoids3d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Arkanoids3d::EditBlockResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Arkanoids3d::EditBlockResult_Result>() {
  return ::Arkanoids3d::EditBlockResult_Result_descriptor();
}
template <> struct is_proto_enum< ::Arkanoids3d::SetBoardDescriptionResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Arkanoids3d::SetBoardDescriptionResult_Result>() {
  return ::Arkanoids3d::SetBoardDescriptionResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_editor_5fproto_5ffiles_2fPlayBoardEdit_2eproto
